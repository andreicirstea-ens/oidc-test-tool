{
	"info": {
		"_postman_id": "99b90132-8042-4516-b4b7-44ae06ff2924",
		"name": "CFS OAuth 2.0 and OpenID Connect",
		"description": "This postman collection is used to try out the **OpenID Connect feature of CFS**.\n\n## Pre-requisities\n\n- Configure an OpenID Connect Application in CFS.\n    - Go to **Administration -> Applications -> OpenID Connect**\n        \n        <img src=\"https://content.pstmn.io/8135220b-8129-4db7-b70d-5b14eac68332/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - Click the \"New OpenID Connect Application\" button\n    - Fill in the fields\n        \n        <img src=\"https://content.pstmn.io/0049d2a0-4d58-4d20-8bea-2588ef7d2a8d/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - For the Callback URL field, use the value: `https://oauth.pstmn.io/v1/callback`\n- Fill in the Postman Collection Variables with appropriate values for `CFS Master URL`, `Tenant Name`, `client_id`, `client_secret`, `username`, and `password` respectively.\n    \n    <img src=\"https://content.pstmn.io/79d7290f-e98b-48d5-b811-fa76f09c6da5/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n    <img src=\"https://content.pstmn.io/62a83ecf-0335-42c0-beb1-0e9abfc74501/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n\nNow you can test the OAuth requests directly in Postman.\n\n## Collection Variables\n\n| **Variable Name** | **Current Value** | **Description** |\n| --- | --- | --- |\n| CFS Master URL | {{CFS Master URL}} | The base URL for the CFS Master instance |\n| Tenant Name | {{Tenant Name}} | The name of the CFS tenant |\n| username | {{username}} | The username used to log in to the CFS Master tenant's portal |\n| password | {{password}} | The password used to log in to the CFS Master tenant's portal |\n| client_id | {{client_id}} | The client identifier  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.2](https://datatracker.ietf.org/doc/html/rfc6749#section-2.2) |\n| client_secret | {{client_secret}} | The client secret  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1) |\n| scope | {{scope}} | The space separated list of requested scopes  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.3](https://datatracker.ietf.org/doc/html/rfc6749#section-3.3) |\n| state | {{state}} | State parameter used for protection against CSRF  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-10.12](https://datatracker.ietf.org/doc/html/rfc6749#section-10.12) |\n| nonce | {{nonce}} | Nonce parameter used for protection agaisnt replay attacks  <br>[https://openid.net/specs/openid-connect-core-1_0.html#IDToken](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) |\n| redirect_uri | {{redirect_uri}} | The callback URL configured for the OIDC Application  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2) |\n| code_challenge | `{{code_challenge}}` | Code Challenge for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.2](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2) |\n| code_verifier | `{{code_verifier}}` | Code Verifier for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.1](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1) |\n| code_method | {{code_method}} | Code Challenge Method for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.3](https://datatracker.ietf.org/doc/html/rfc7636#section-4.3) |\n| authorization_code | `{{authorization_code}}` | **This variable is managed by the Postman Collection itself, do not modify it manually!**  <br>  <br>The OAuth authorization code  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1) |\n| id_token | `{{id_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OIDC Id token  <br>[https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse](https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse) |\n| access_token | `{{access_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth acess token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n| refresh_token | `{{refresh_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth refresh token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n\nThe \"Authorize\" requests will automatically set the values for the `authorization_code`, `id_token`, `access_token` collection variable(s), while the \"Request for tokens\" requests will automatically set the values for the `id_token`, `access_token`, and `refresh_token` collections variable(s) where appropriate.\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in the \"[Implicit Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-0adeda1d-0730-496d-b6d8-79fd4cb9ee10?ctx=documentation)\" and \"[Hybrid Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-38b7714c-3ef1-4f1f-9f42-14ac1e5d6c0b?ctx=documentation)\" folders!\n\n<img src=\"https://content.pstmn.io/bb3aa626-370b-4bfc-88b9-b0daec95b702/aW1hZ2UucG5n\" width=\"846\" height=\"840\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25667693",
		"_collection_link": "https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/collection/25667693-99b90132-8042-4516-b4b7-44ae06ff2924?action=share&source=collection_link&creator=25667693"
	},
	"item": [
		{
			"name": "Authorization code flow",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code",
									"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
					},
					"response": [
						{
							"name": "Authorize",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code",
											"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "731"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAANT0cLM80xiZEGjv89nHF4n1GjI7edcjIEaHeVDReUfNIQEAAAHffyS6XgvvgAIUU9YUh1zxazc_sda9Tn9g6lwhSbK_XOdh1RTJjYJxS3a5LFLtIB4GeGrsSxoJAQLCaU2mRwVx4znQxsY3zqzflTvH3y0zCyhBrm1naQcw96eEEtYCPppYNY-vzaxlsfL6lA4a3MT93zyh84n-HitmO-QbRcg5D1owY7JZNwBnOne8tDNO-Vbj8e5pHe8AmyUs4gF1Wake6lrNrwWsHkwlch-HKVZB25eibyywwOoypg583m-pTfdW_OQypU3eMuCQlLsa0C3zdq3oAEdJRmq9scxeqkaK836hoWJY7aevDPR6N0aBZKN_khQmuhtAOmn31xCb5Ef4FcuPn4edyJx-m8KffVwIcszsph9gL9Nce1q6gd7zhKc&session_state=DWSesQOIexOCJOGaReABDPneIXjaKKJe4XWpr8J5rTY.6824395F3D18FB89677E43CB085556CA&state=6879bf2ef296d720f3a54eb8faabee9c"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:00:35 GMT"
								}
							],
							"cookie": [],
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAANT0cLM80xiZEGjv89nHF4n1GjI7edcjIEaHeVDReUfNIQEAAAHffyS6XgvvgAIUU9YUh1zxazc_sda9Tn9g6lwhSbK_XOdh1RTJjYJxS3a5LFLtIB4GeGrsSxoJAQLCaU2mRwVx4znQxsY3zqzflTvH3y0zCyhBrm1naQcw96eEEtYCPppYNY-vzaxlsfL6lA4a3MT93zyh84n-HitmO-QbRcg5D1owY7JZNwBnOne8tDNO-Vbj8e5pHe8AmyUs4gF1Wake6lrNrwWsHkwlch-HKVZB25eibyywwOoypg583m-pTfdW_OQypU3eMuCQlLsa0C3zdq3oAEdJRmq9scxeqkaK836hoWJY7aevDPR6N0aBZKN_khQmuhtAOmn31xCb5Ef4FcuPn4edyJx-m8KffVwIcszsph9gL9Nce1q6gd7zhKc&session_state=DWSesQOIexOCJOGaReABDPneIXjaKKJe4XWpr8J5rTY.6824395F3D18FB89677E43CB085556CA&state=6879bf2ef296d720f3a54eb8faabee9c\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
					},
					"response": [
						{
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2226"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:06:23 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk1ODMsImV4cCI6MTcxMjA1OTcwMywiaWF0IjoxNzEyMDU5NTc5LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.F00labVphp73LT-RyvIoJNAozlNtT4QsxmaTYtNyb4zNPq8ekGKwKymNqeM_fKo_yNO8Dpjva31sru0Q0wD3bJYI8AN8JWGIPbnjhXjD5lK-Uh4kU8FH-0h88D8AN2h-XAjgmtv7bCQEtaerh0Z3SO2C2EgJ-ykadzPfS3diMfhUCZLIWP5Bpr7mxGbUe_EuEhWWZfXJFatn99ps3hhTyp9s2oPIg0o9NM5nBaef-dSCajsR8a-ngiLrAHMd6UnYF0bi4SyEaBUYZwEbd2osFeJ0LzopCrwZKkuHHsiZ0qWI1cH6J9LPkmObOr2Iv5M8n1q6AP9RbyakYWDp26FZhQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAALfxhkVIyDdIjhj3kkKLzRmsXha3GPR6lcjtVR5_kQrJsQAAAAHHoWXoZ7hNxfEIIa25gKQs1eOT6qJxun2XK6EM9zNiZx9qoEHpF5ZeIu7fmV3C-Bf5Pesg02dwNVC3V2ilNldMX6GeBlk8tbUj_WeawZVocd8ayz3CAz57Xpg9ll-czZXkILVZaqqMyvxrVWmvab8sUM0f47HOMOcwlVGVn7kwg-WnnYPpC3VkzuYoODxavHelt_qCqL32nGEsitaQO-ZYKzBQPaPZNl9H-c8Tb3bijA\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiI2SFl6cnNHVENYZF9KM0NqajJESVFBIiwiYXRfaGFzaCI6IjRxTDMwRm9HWXFhbHUwajc5TkZPNlEiLCJuYmYiOjE3MTIwNTk1ODMsImV4cCI6MTcxMjA2MDc4MywiaWF0IjoxNzEyMDU5NTgzLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.QXETXilNM6kuuUBKk8AczyDKiTPrOnSmS2s1rhF4w4G8VteqjmXR6YT3iPGp3M6kJ898tnoijR8b0_cHndrIrDGASC0YNiCPMq_yl9ZwtdUBzRtGQSTRjJSjURYWBK9bK3VBvnKowAu51jnvozeO8OL4_8dg7yeby2aYg4y5dQZRF8I5wpu1uzgOJCoOoHkngWIMJ09lu5NVHS-9BETyI6LwSz1BNnNX5ygyPkelbc7eNNyLDGqLP2-QN81QQDJWfobzEylFtDu3gzMT2z-NvpDSD5_g-NC8xVEk4bkChQe9WodwJnGosR0o2EuJFDdLuNbvkPisisCjfY5MkIntWQ\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"description": "- Run the \"GET Authorize\" request\n    - The response will contain an `authorization_code` that will be automatically captured and set as a collection variable to be used by the next request\n- Run the \"POST Request for tokens\" request\n    - The response will contain an `access_token`, `id_token`, `refresh_token` that will be automatically captured and set as collection variables to be used for any subsequent requests that require authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization code flow with PKCE",
			"item": [
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "code_challenge",
									"value": "{{code_challenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "{{code_method}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
					},
					"response": [
						{
							"name": "Authorize",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}"
										},
										{
											"key": "code_challenge_method",
											"value": "{{code_method}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "816"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAAGZmSB_tQRJCEYgGB_jsWnBtUr3Ln19bsrVLGh3LwqbsYQEAAAFvORfULXADGP3F6K8SAdxYLheeJOWYIVDlsYmHI_VvF6WjrrYq8WubXpnIKyAesrypr8Ns6_UHEzwkFgtuTghL-87KtjTlWyVsBPUqU5SzDhyR1esvKW5LrOsdS-2K6vR7_kq6YgRoWUOvgxftxpZufDr-9iXB1EG8YVSYk0VhRGcG_GdjzNDpfZWmY7mi8GovXod967MsF7jqloVDXwDt8uG0n-xNUMOClmOKsjm467RK-EIjtDh_9Z7KoSERwi3T3SPYOoQl7eKK98of3_YuZ2iLQkLQjJXmxWe08sCFxG0R5Xb4jztlaTkBxEqArZJ7cYTZl5Jsv3fWE-mNSq7JlQIt8vlyZe--N7bJYjhskmTo-VejwwnfY7hux5PNctO02sz_UPwk9yPzB8WhwEIOgydSENdbxj9zcFwIyf11SBMxWwWLOQUEh9w2vflA-SCMRRPguEQ5AVVetDhvx666&session_state=GpQ92AYSBfdOdvo7ZEvzjdQFYcnBCUdqLObYRteNJ_s.96971A7F58E9CFF51FE81C026AF977C6&state=6879bf2ef296d720f3a54eb8faabee9c"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:06:48 GMT"
								}
							],
							"cookie": [],
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=O6Uj%21IAAAAGZmSB_tQRJCEYgGB_jsWnBtUr3Ln19bsrVLGh3LwqbsYQEAAAFvORfULXADGP3F6K8SAdxYLheeJOWYIVDlsYmHI_VvF6WjrrYq8WubXpnIKyAesrypr8Ns6_UHEzwkFgtuTghL-87KtjTlWyVsBPUqU5SzDhyR1esvKW5LrOsdS-2K6vR7_kq6YgRoWUOvgxftxpZufDr-9iXB1EG8YVSYk0VhRGcG_GdjzNDpfZWmY7mi8GovXod967MsF7jqloVDXwDt8uG0n-xNUMOClmOKsjm467RK-EIjtDh_9Z7KoSERwi3T3SPYOoQl7eKK98of3_YuZ2iLQkLQjJXmxWe08sCFxG0R5Xb4jztlaTkBxEqArZJ7cYTZl5Jsv3fWE-mNSq7JlQIt8vlyZe--N7bJYjhskmTo-VejwwnfY7hux5PNctO02sz_UPwk9yPzB8WhwEIOgydSENdbxj9zcFwIyf11SBMxWwWLOQUEh9w2vflA-SCMRRPguEQ5AVVetDhvx666&session_state=GpQ92AYSBfdOdvo7ZEvzjdQFYcnBCUdqLObYRteNJ_s.96971A7F58E9CFF51FE81C026AF977C6&state=6879bf2ef296d720f3a54eb8faabee9c\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to openid email profile\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
					},
					"response": [
						{
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2226"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:07:18 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk2MzgsImV4cCI6MTcxMjA1OTc1OCwiaWF0IjoxNzEyMDU5NjA4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.oFpj8X93v6TRdHATaj2RO5euNWQsMtMehBZxKA7EZKwKIX8nz63fhAN11Q17f8BMeYOY46Nz9SALhz_RoGkITvfazE-70PwQSU1ya9fzDoj2V8ecC9toE9PE_7UqpZIxSuAAThoDQ_OmhJEhPcZptC1OmRh5L1IpaMiquySFooGQlsYVu8ImLCMySIKM4gkZ-l2eH4cOcrnFRj0al-J8SVn8sENWWV1lG--r1akAHjXBvcstJgjeeCNjaoTOVaFprUTcFfe8kc7JtcfbZEv7E4otJC71ukLUvOJYBgpgiHkXlSkTTqDamqxdENtwpTz5LP52LPbMYM13g1k9tQsZyQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAM5DLrGlxSySo85F1nzKpkUL-DuGNwok7dFpSsR8xJmssQAAAAFjnmhdUw0_RRKteQFQrhnqgMu3IU5YNFOZgM-7T1tqkBFuTBQNjzughKxhwLClv09k4g8y4LqmFGGR1Q--jLVGqT6SlRbXVJFcJu_UebNufY-ESuydUZeYS_0OqjIKUaNDytA3yI1o1lBKfDgpJaJZnUeksaV4uMFinVIt74z_usBZyMGGoZYBgLuDjOPEWjX4JMejFt_TptbQQL0D2lFOpVXkdi4T2G2LDhhzqkSW0w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJfNzNFSGdma0RhcVRxdmRfN2Qxbkl3IiwiYXRfaGFzaCI6Im5RZDViT3VnbWRieHU3bDFnd2dkeHciLCJuYmYiOjE3MTIwNTk2MzgsImV4cCI6MTcxMjA2MDgzOCwiaWF0IjoxNzEyMDU5NjM4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.XH6Vvwn019kq4YRE6eO_7ho3pUPvOXvpe2nfwQ-fCh0MnSK79_KZzGIrBtQDqLbCE30nYV2d9Lxyzci85ZALTmmhfLdkqKkYzKqeuHcsj9l7c_L-tvzS0cqoLFpn1FcmsY8iFlK7WPufVlvna9_lmqCaThH8F6BHCHMQIINsQMZyPFBCIDhk9P6FwOU2igVHB6tM1mx_EQPYVDslrpOkbpNPK1qSWRXBeIk7dAUzZ1blim2bK2hyeLsTAvOavYcsVry0hagATGUa868S6ptZE8xUCJfHpUr2OXHpO0a1MZyvBFqiwziB3eTvpkrZNFmpGxrLXTkdMpCiN2rY44Wj3w\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Implicit Flow",
			"item": [
				{
					"name": "Authorize - id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "id_token"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `id_token` in the **Response -> Body -> Visualize** tab\n    - The `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
					},
					"response": [
						{
							"name": "Authorize - id_token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:08:08 GMT"
								},
								{
									"key": "Content-Length",
									"value": "4477"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"XxkR4WpYAT_Ry6GDdKXbAxw0kuR3K4c6c-PRKX2cehgnpFYpCkl6ylsHV7rEqPJWjHQVJvqJvT_j4I-q0kAGyUHf-Qq1gF36yS81JkDEzfAGlgBUAG0a3tANNTmlGqI3XTZ8FjIS-l-XGrUJD0YQNA2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Authorize - id_token token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"\r",
									"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "id_token token"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
					},
					"response": [
						{
							"name": "Authorize - id_token token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:08:18 GMT"
								},
								{
									"key": "Content-Length",
									"value": "4491"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"OQs4jpeUU3HYJccPXnx-SyVyrdFuSeNl08iM0Wz76edRPQ0vwz_J_RGqHrSPaHbVMK5WsjdGZgCwS5jXcuvull367ExIvx33fpmrc40T4eVEEtfuHVOBy5rLJ4HxFesB8-fQdO_c2AAbh-UFrM5L7A2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
						}
					]
				}
			],
			"description": "Run any of the \"GET Authorize\" requests\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e3542bce-db42-4b74-b2b5-6a4a0cabd789/aW1hZ2UucG5n\" width=\"846\" height=\"840\">"
		},
		{
			"name": "Hybrid Flow",
			"item": [
				{
					"name": "Token - code id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code id_token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n    - The `authorization_code` is expected to not be empty\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        \n        - if all the above tests are passing"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:08:58 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4489"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"N-G2nkrv0sB6wc-bJiLJ7956TMCoSzkO85wkLYUERK9a_HiVv3yAmGOgTs3ezjBOzWBleBMcVCxRLLz8B_gJ6Y4jwLuAxFX4x0sKPZkIXAkkBrvJDs6EHjRwU2sbt87xG9_dEbITLQF4TDOeyAaE_g2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n            \n    - Refresh token grants new tokens\n        \n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:06 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk3NDYsImV4cCI6MTcxMjA1OTg2NiwiaWF0IjoxNzEyMDU5NzM4LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.lySCTDHduG5VIh0kne-b6HQLkQ7ups1vE_wiq3OmGaTPF8S-3JWCg62qETH5HpBNm0K7DebVLyuWhwOLBQon9ReifU0Jt0RFpLijOi89AehpKwJyYpN2_27kh4ztQM_j4S0-9QThHHjTkrvdX8Qc-nLG_ufBt4Z7ngRMCxPkCBdreZxkKiRGg5TczoIbn4F9YXTiJIG4FPhkXXy4h5e6IGIHYkXlxVee4ImLPbIpFP4T-Xkw-Jri9gdXJnTRKWEZn9ARodSYZI7yQm8i5KwprGU5H8V8THP5mwE-4X14mf5uGCn8NPHfQ1qkK3PxbSAAd6j-1iqQPNJ9nwmokvSYIg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAFL9aaCI3sDlPkRnMbxgWM9NqL7MqOneugTkp8rkcpY9sQAAAAH8TbS5GB3K6dfLrb217XD-Rv6DjGU_ozVIvB2NvcqpfnkLPm4S2YxOdkT-XD-0vZM9VAGfuXHHxaqJUJVOddnFvW01o9IqWpyd8wWr-zQE6l_ndlZln7RSrbhLtQQzMAtk4SKhl-szZybMY7T9H9xu40qNn6yUuW8qhHGDgvminzr6V2Qrv8EdamU0h2oBBPqYeo34xqg18n1FG9EuelRUOmALqCH8nfsBzWQUYWFy3A\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJWVjlCb0I3cmNHOUw2SlFkenBsRVRnIiwiYXRfaGFzaCI6Im1zdEozMDlMLW5YQzJKbnVMYzBCR2ciLCJuYmYiOjE3MTIwNTk3NDYsImV4cCI6MTcxMjA2MDk0NiwiaWF0IjoxNzEyMDU5NzQ2LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.Qb4M037KUMWBsp_UdBMMRuCF2E7tk4WGPS8yiJ5BDNvPI12EVOln9gfUiBtrQhB-dVX9COXhpofIM-9rD8Mf25hxLjgP-ccFzoWEEhtCt6M__e75eddYEZFNKb_JJDZvfh9w0d4vLdNb-rqg9xE0TdlzjyhtmIqGrPWUHOu_nKCjav9G48mp8oiFuYdogmV1Zjl5Ur_iQ2HTWh3lDACve31bGVQyu81hHlclAfz1YwwwXkgjxZp6gRPOEs3jiq1zjogm5KlEh_fviU9qxo9LZ-_SEEcWMJ0aHk5Udkfv36ySc3l_fZWLG2E9IOvVph6HK_BrI-PDNmu_fkLHh6qOeA\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Token - code token id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code id_token token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    \n    - The `authorization_code`, `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n        \n    - The `authorization_code` is expected to not be empty\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to openid email profile\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:31 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4503"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"cucIfmmQETtVeRWOtgNHP1GNMu0zSTZ_bpJUK6VKIZmcczAkwcf3hnT8bKr9ABrRo76AaKyvWlzfYlv4CW3OTmiqEUa_Ib8MuZ8LKcKYULfy-oi5-Lpdsz0JlZ4KBtL8GakdCGWNsmKjSk-l95KJSQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n            \n    - Refresh token grants new tokens\n        \n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:09:40 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk3ODAsImV4cCI6MTcxMjA1OTkwMCwiaWF0IjoxNzEyMDU5NzcxLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.SAOq0BmiV_fuHwqPDy9p3ZVKqzxz-aQBQVXVEv5zZkaSkNsNb8UIaajuetmUZRXSkgEPK_S0o7ofYZs3djIUkAzioiUjsVn_OyBNvPFUXjDTSf2-2TAH9n2aaCCCdJ-VjFGTRsa59HdGZ_T6YJiuRciEveCJjkjtMmfwgrXby_AUcj4Q_w8AjX3gJ-C_d5dHyjBjtOc1hhREqQcoGs3THoEPrkKlpDADpmFwy0MYIhdExoP0Wkt0iJq5jVK-RxhmRFlG9e0z56tfMp9We2oW2FLFFgIs31gSyMfaN76gE7Kq69QtEL0Ts2dfHgZJvzCN1Gknvb8X69Sp-ZWdTqe_vQ\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAHPFY1E5n0vU9ZuNx9vJD4N6Vrkt0f6QlMx7Yy5_mgSJsQAAAAHtX1NBmdNB7er1UI3euIaSOPwDp3wU6gP5C4vsBEvUCq560PpJWEAqzriqCV9uzwHLi3wT75EHkEWUVXpDrsdnjlr1jTKghHWgU9ywrL2NhRadQzQO__vvCgv9ihuIlhRBE2-fUNwK_xmSNG0NWlaFiXBTCWiSSxEZRTkstBBr5qDXqaPvwJrL2PII7tgZCy36gy1KTH6sb40c_cWrYqU9GnJX4KBu12Lc8M3gJR3Vsg\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiIxXzc4UXFoT3dya3hUNEtHenBBZU1BIiwiYXRfaGFzaCI6Imx6S3J3RF81ZnhYYjFmWFJ6Ul8zcEEiLCJuYmYiOjE3MTIwNTk3ODAsImV4cCI6MTcxMjA2MDk4MCwiaWF0IjoxNzEyMDU5NzgwLCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.RcE6JzSlia6WEcvyLo1VHLe5QTkvhi1kH_o_8sdrzA_zycTrZVaN254e8E29Gk9pNtFzLopXSXsS6t9H0QBpbordABk9ZlZvozNW-b0Al013TQ6U8_yEFYzilIKGl7qtezIhF1ESHYKWBv1sR7e2UNw8uh2xUXLWf7PrnJQFp4IZZxTBpajZeSbxvXvgM7bvkcuFs6hmsQ1H__HtqzfAdjP8eQixE8u5Kc1ayhNM4AVZmTeAjfz3qljQmUhx1uUfcdoQtB75BcPwWuMNL_vIrtEmMAkcwhhxEIh-xG7c3A-cIXa39iRCHXNvl8TEFPuDvvptbq3Uy0uQ0AiTlJwEHg\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Token - code token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `access_token` in the **Response -> Body -> Visualize** tab\n    \n    - The `authorization_code`, `access_token` will be extracted from the callback url and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n        \n    - The `authorization_code` is expected to not be empty\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to openid email profile\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:10:05 GMT"
										},
										{
											"key": "Content-Length",
											"value": "4483"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/cfs/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/cfs/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\r\n        By signing here, you can use Test OIDC Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize Test OIDC Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                    <li>Get your address.</li>\n                    <li>Get your phone number.</li>\n                    <li>Get your groups.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\r\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/cfs/oauth/stormwind/authorize?scope=openid%20email%20profile%20address%20phone%20groups&amp;response_type=code%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=stLJwW9b3L5BPaiFFVx9cB&amp;state=6879bf2ef296d720f3a54eb8faabee9c&amp;nonce=c4fdef35f2e05abe2ceb88ae0f743ee4\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"UxCkT84Nrdm5r-74zKnPp_FvU81lFex-tOv1oz6Aed3KsyZZXk7gZQyCyiIpkdwt2hO8E8z27K8h9VUeH9bqRIOzhYJMa0WmrlzF-XVqqCaObgmchLDQw4nON8kb-ZpQFT_GAlFQblP4rhL8vncsaw2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"stLJwW9b3L5BPaiFFVx9cB\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"6879bf2ef296d720f3a54eb8faabee9c\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile address phone groups\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"c4fdef35f2e05abe2ceb88ae0f743ee4\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\r\n                    Accept\r\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\r\n                    Cancel\r\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/cfs/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\r\n        document.getElementById('responseButtonsDiv').style.display = 'block';\r\n        document.getElementById('javascriptDisabled').style.display = 'none';\r\n\r\n        if (document.location !== window.top.location) {\r\n            window.top.location = document.location;\r\n        }\r\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2226"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Tue, 02 Apr 2024 12:10:15 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk4MTUsImV4cCI6MTcxMjA1OTkzNSwiaWF0IjoxNzEyMDU5ODA1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.Y38xkXDEyaXdyvB09ZDraPPeO8s-DVoCk33ZS0rnMVyJjDzMoGHU6J1qRLeflEhiP7sS5bpFgWalcn-rdOQgVrQJ8HehhuvI-Xo6oHhrwJSswEKRRtkWBwKXRHVQqSMvI9zoQ1pVaO2aacu1AS1DMLCT0Q_iSFwoQUmfH9LG5gXGB0JDSRdyYG-AjYDyEB_aSd2g_PmWFPyhNfERblqk13gVF9zRf_zdNV824TYeTymcplfQuCGvFw4WNBvUiH6AC7DdzNIdWrTBH4shQWTKNsxB76l1x3CK-TOOQs9vgLs0n1JRtOJ0pMKMS4oO93rHpsn3AbZtBg_yWJXPyROHtg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAATFA9yY9J8FfBIcOyDe9zcjqmKVScOKQgkj0eM_7CORsQAAAAHfJNwKMENeCqFg_em6nXtOtL7er8zEzkEETs9Bu8qPT0UBSHuvtQ1qxqaB4mchbuuYwbmNnMUHSZeXJNJB8jL7DYUg0Y4sWuBYiDrEmRMU3ecxKVk-A59lxqge4GSxj2SpY2Fhg7Kfi9AxEdVZklVfy1d25B065oGsIRwKuIMCsfaBJsrD0E6fnm6EzlQP71MfCzxy0mOPsP4IY9qoHH7Ml77JeqOgglSYgTj7gxt2dg\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6ImM0ZmRlZjM1ZjJlMDVhYmUyY2ViODhhZTBmNzQzZWU0IiwibmFtZSI6IlZhcmlhbiBXcnlubiIsImZhbWlseV9uYW1lIjoiV3J5bm4iLCJnaXZlbl9uYW1lIjoiVmFyaWFuIiwiZW1haWwiOiJ2YXJpYW4ud3J5bm5Ac3Rvcm13aW5kLnplciIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJjX2hhc2giOiJhWDYzQXV3SWtuN0tWcmxfaDIzcWVBIiwiYXRfaGFzaCI6ImJsUU5CVGJaRjhMX2ZrOHMyUnpLNVEiLCJuYmYiOjE3MTIwNTk4MTUsImV4cCI6MTcxMjA2MTAxNSwiaWF0IjoxNzEyMDU5ODE1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.dT9zdLE7tTEL9SAAZ3fV_6LRau4HRjy6cKTRyhqz8utCnc1SetQbWoYAauZAqIFOM6_7cncIJ6ktuN37XbW-WlrxRp-IzHawd5hoLO7qr99zXDnGy6wX8X-DMtbsNP8OkXpqjZH0q1vG4C9zPZzHCQzZNKn7gM78pjPHIz4LpJB7dpeP5JglmBvxpZ1wJBqeyRetLc7Ltnm0h1SonPonH9-MVAFo5hNJ-aQBfPlWAnHquuKHxPdQzlvaZFgH2N35lIdFG0FBHXvcxX6EXloxdpc5Im8u2HgQimwP1B-Xi2UO6fTIj5EjkE_DtfezlcwFppN-ZOocnCEB4ASynuB56Q\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				}
			],
			"description": "**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e920769a-172e-49da-a73d-9b6a531ce945/aW1hZ2UucG5n\" width=\"846\" height=\"840\">"
		},
		{
			"name": "Client credentials",
			"item": [
				{
					"name": "Request for access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();",
									"",
									"const responseData = pm.response.json();",
									"",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);",
									"",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);",
									"",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
					},
					"response": [
						{
							"name": "Request for access token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "948"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Tue, 02 Apr 2024 12:10:40 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJzdExKd1c5YjNMNUJQYWlGRlZ4OWNCIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSBhZGRyZXNzIHBob25lIGdyb3VwcyIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJjbGllbnRfaWQiOiJzdExKd1c5YjNMNUJQYWlGRlZ4OWNCIiwibmJmIjoxNzEyMDU5ODQwLCJleHAiOjE3MTIwNTk5NjAsImlhdCI6MTcxMjA1OTg0MCwiaXNzIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCIsImF1ZCI6Imh0dHBzOi8vY2ZzLmV4YW1wbGUuY29tL2Nmcy9vYXV0aC9zdG9ybXdpbmQifQ.O-c6ARixHNdF9GeBZSYnNLLh1xuPSwmXDk0LD3d9T952eDVXjv280hAKVlOVlE7mvjmBwoFMTDcSsP6rZmydnECgqNJmMzvb7gI6fN4O3lNU_G5rn2NeNzfP4ztE7_OamGfX3TdZGDaoUuQoXwq-vihQnLSC4J4L1GUT94T6EDxenN_9ny-P4kh5IuMtMAoXuKzdkpr9zvIqV9UwhFuh9VBABObT-gN5b0Bap33b9AYI9XdmL--J--_RNNvBFOjQLgxNPTfszkYgw8GVdrnkAur_h7E1uBQYFTT5KE5dVy9-QnNWPCHFQm7BneyGUNih73zhaPssE2Z7VK1TcmiTkA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"scope\": \"openid email profile address phone groups\"\n}"
						}
					]
				}
			],
			"description": "Run the \"Request for access token\" request"
		},
		{
			"name": "Resource owner password credentials",
			"item": [
				{
					"name": "Request for access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();",
									"",
									"const responseData = pm.response.json();",
									"",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);",
									"",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);",
									"",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{resource_owner_password_credentials_username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
					},
					"response": [
						{
							"name": "Request for access token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "888"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:02:23 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJjbGllbnRfaWQiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwibmJmIjoxNzEwMzM4NTQzLCJleHAiOjE3MTAzMzg2NjMsImlhdCI6MTcxMDMzODU0MywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIn0.EsI-e_GP1ntXoOzk9nsIJUEjY3GtHJ8niZSUdCPQBYQp7JyncPysE27YdOIrf8y_9JWHLnSVhCToA6BnsxmoZJV1NLiwQ-HZHhi9jMC022RsPGm0pao41R6dYcKZA26xr2tnYDmutYXKMAgq5xWiapqYBY_2YkgwLp3ZNh618wQt2YOgdkXOlKSYG-tfu-kfHhEfJ5BD9yrT85jc0ZZfZFsjKJGlSZubs5KYiDifF5RSumDQPgfFYUJ6AsVrO-sYGOqE02VN6Qfwzmkq-PTC0zPnwqgUtRfTh41mbZ0H0kCg0-jq0WhU_jMREaVqJ9SJmc2RMI-z-ZdidLBXk7t1dA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"scope\": \"openid email profile\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Validations",
			"item": [
				{
					"name": "Common",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "Invalid client id",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id=invalidClientId&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "invalidClientId"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid callback url",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id={{client_id}}&redirect_uri=https://invalid.callback.url.example.com/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://invalid.callback.url.example.com/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid scope(s) only",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_scope\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_scope');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type={{validations_common_response_type}}&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope=invalidScope&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "{{validations_common_response_type}}"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "invalidScope"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										}
									]
								},
								{
									"name": "Expired access token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
															"    const atob = require('atob');\r",
															"    const jwtPayload = JSON.parse(atob(access_token.split('.')[1]));\r",
															"    const exp = jwtPayload.exp;\r",
															"    // Wait until exp + 1 second\r",
															"    const wait = (exp * 1000 - Date.now()) + 1000;\r",
															"\r",
															"    console.log(`Waiting ${wait}ms for access token to expire...`);\r",
															"    setTimeout(() => {\r",
															"        pm.sendRequest(\r",
															"            {\r",
															"                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
															"                method: 'GET',\r",
															"                header: {\r",
															"                    Authorization: 'Bearer ' + access_token\r",
															"                }\r",
															"            },\r",
															"            (err, response) => {\r",
															"                pm.test(\"Expired access token does not grant access to resources\", () => {\r",
															"                    pm.expect(err).to.be.null;\r",
															"                    if (err) {\r",
															"                        console.error(err);\r",
															"                        return;\r",
															"                    }\r",
															"\r",
															"                    pm.expect(response.code).to.be.equal(401);\r",
															"                });\r",
															"            }\r",
															"        );\r",
															"    }, wait);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "token"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Authorization code flow + Authorization code flow with PKCE + Hybrid Flow",
					"item": [
						{
							"name": "Token",
							"item": [
								{
									"name": "Invalid authorization code",
									"item": [
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_grant\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_grant');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "invalidAuthorizationCode",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid client id",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "invalidClientId",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid client secret",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(401);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_client\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "invalidClientSecret",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid scope(s) + valid scope(s)",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope=openid email invalidScope&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "openid email invalidScope"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token, {\r",
															"    expectedScopes: ['openid', 'email']\r",
															"});\r",
															"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
															"\r",
															"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
															"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
															"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
															"\r",
															"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
															"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid response access token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"// pretend the server responded with an invalid access token\r",
															"const access_token = \"invalidAccessToken\";\r",
															"pm.test(\"Invalid access token decoding fails\", () => {\r",
															"    const atob = require('atob');\r",
															"\r",
															"    pm.expect(() => JSON.parse(atob(access_token))).to.throw();\r",
															"});\r",
															"\r",
															"pm.sendRequest(\r",
															"    {\r",
															"        url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
															"        method: 'GET',\r",
															"        header: {\r",
															"            Authorization: 'Bearer ' + access_token\r",
															"        }\r",
															"    },\r",
															"    (err, response) => {\r",
															"        pm.test(\"Invalid access token does not grant access to resources\", () => {\r",
															"            pm.expect(err).to.be.null;\r",
															"            if (err) {\r",
															"                console.error(err);\r",
															"                return;\r",
															"            }\r",
															"\r",
															"            pm.expect(response.code).to.be.equal(401);\r",
															"        });\r",
															"    }\r",
															");\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid response id token",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200();\r",
															"\r",
															"// pretend the server responded with an invalid id token\r",
															"const id_token = \"invalidIdToken\";\r",
															"pm.test(\"Invalid id token decoding fails\", () => {\r",
															"    const atob = require('atob');\r",
															"\r",
															"    pm.expect(() => JSON.parse(atob(id_token))).to.throw();\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								},
								{
									"name": "Invalid refresh token",
									"item": [
										{
											"name": "Refresh token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "invalidRefreshToken",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Authorization code flow with PKCE",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "Invalid code challenge method",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const responseData = pm.response.json();\r",
															"\r",
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															"\r",
															"pm.test('Response body has error_description', () => {\r",
															"    pm.expect(responseData).to.have.property('error_description');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=invalidCodeChallengeMethod&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
														},
														{
															"key": "code_challenge_method",
															"value": "invalidCodeChallengeMethod"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Token",
							"item": [
								{
									"name": "Invalid code verifier",
									"item": [
										{
											"name": "Authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
															"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=S256&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
														},
														{
															"key": "code_challenge_method",
															"value": "S256"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												},
												"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
											},
											"response": []
										},
										{
											"name": "Request for tokens",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
															"\r",
															"const responseData = pm.response.json();\r",
															"\r",
															"pm.test('Response body has error \"invalid_request\"', () => {\r",
															"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "code_verifier",
															"value": "invalidCodeVerifierMR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												},
												"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to openid email profile\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Implicit Flow + Hybrid Flow",
					"item": [
						{
							"name": "Authorize",
							"item": [
								{
									"name": "User denies consent",
									"item": [
										{
											"name": "Authorize - id_token token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
															"\r",
															"pmutils(pm).postDenyAuthorizeRequest(response => {\r",
															"    const URL = require('url');\r",
															"    const qs = require('querystring');\r",
															"\r",
															"    const responseLocation = response.headers.get('Location');\r",
															"    const url = URL.parse(responseLocation);\r",
															"    const queryStringValue = url.query;\r",
															"    const queryString = qs.parse(queryStringValue);\r",
															"\r",
															"    pm.test(\"Response location has query string parameter \\\"error=access_denied\\\"\", () => {\r",
															"        pm.expect(queryString).to.have.property('error', 'access_denied');\r",
															"    });\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "id_token token"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "These tests simulate the case where the user would deny consent, i.e. clicking the \"Cancel\" button on the consent screen\n\n<img src=\"https://content.pstmn.io/6258ac22-09a1-4f5b-8ecf-35a397b0c33c/aW1hZ2UucG5n\" alt=\"\" height=\"924\" width=\"1619\">"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Get OIDC metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"const baseTenantOauthUrl = pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name');\r",
							"\r",
							"const expectedIssuer = baseTenantOauthUrl;\r",
							"pm.test('Response has expected issuer', () => {\r",
							"    pm.expect(responseData).to.have.property('issuer', expectedIssuer);\r",
							"});\r",
							"\r",
							"const expectedAuthorizationEndpoint = baseTenantOauthUrl + '/authorize';\r",
							"pm.test('Response has expected authorization_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('authorization_endpoint', expectedAuthorizationEndpoint);\r",
							"});\r",
							"\r",
							"const expectedTokenEndpoint = baseTenantOauthUrl + '/token';\r",
							"pm.test('Response has expected token_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('token_endpoint', expectedTokenEndpoint);\r",
							"});\r",
							"\r",
							"const expectedTokenEndpointAuthMethodsSupported = [\"client_secret_post\", \"client_secret_basic\"];\r",
							"pm.test('Response has expected token_endpoint_auth_methods_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('token_endpoint_auth_methods_supported', expectedTokenEndpointAuthMethodsSupported);\r",
							"});\r",
							"\r",
							"const expectedUserinfoEndpoint = baseTenantOauthUrl + '/userinfo';\r",
							"pm.test('Response has expected userinfo_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('userinfo_endpoint', expectedUserinfoEndpoint);\r",
							"});\r",
							"\r",
							"const expectedResponseTypesSupported = [\"code\", \"token\", \"id_token\", \"id_token token\", \"code id_token\", \"code token\", \"code id_token token\"];\r",
							"pm.test('Response has expected response_types_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('response_types_supported', expectedResponseTypesSupported);\r",
							"});\r",
							"\r",
							"const expectedResponseModesSupported = [\"query\", \"fragment\", \"form_post\"];\r",
							"pm.test('Response has expected response_modes_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('response_modes_supported', expectedResponseModesSupported);\r",
							"});\r",
							"\r",
							"const expectedSubjectTypesSupported = ['public'];\r",
							"pm.test('Response has expected subject_types_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('subject_types_supported', expectedSubjectTypesSupported);\r",
							"});\r",
							"\r",
							"const expectedIdTokenSigningAlgValuesSupported = ['S256'];\r",
							"pm.test('Response has expected id_token_signing_alg_values_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('id_token_signing_alg_values_supported', expectedIdTokenSigningAlgValuesSupported);\r",
							"});\r",
							"\r",
							"const expectedJwksUri = baseTenantOauthUrl + '/.well-known/keys';\r",
							"pm.test('Response has expected jwks_uri', () => {\r",
							"    pm.expect(responseData).to.have.property('jwks_uri', expectedJwksUri);\r",
							"});\r",
							"\r",
							"const expectedScopesSupported = [\"openid\", \"profile\", \"email\", \"address\", \"phone\", \"groups\"];\r",
							"pm.test('Response has expected scopes_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('scopes_supported', expectedScopesSupported);\r",
							"});\r",
							"\r",
							"const expectedClaimsSupported = [\"sub\", \"name\", \"given_name\", \"family_name\", \"middle_name\", \"nickname\", \"preferred_username\", \"profile\", \"picture\", \"website\", \"gender\", \"birthdate\", \"zoneinfo\", \"locale\", \"updated_at\", \"address\", \"email\", \"email_verified\", \"phone_number\", \"phone_number_verified\", \"groups\"];\r",
							"pm.test('Response has expected claims_supported', () => {\r",
							"    pm.expect(responseData).to.have.deep.property('claims_supported', expectedClaimsSupported);\r",
							"});\r",
							"\r",
							"const expectedEndSessionEndpoint = baseTenantOauthUrl + '/endsession';\r",
							"pm.test('Response has expected end_session_endpoint', () => {\r",
							"    pm.expect(responseData).to.have.property('end_session_endpoint', expectedEndSessionEndpoint);\r",
							"});\r",
							"\r",
							"const expectedCheckSessionEndpoint = baseTenantOauthUrl + '/checksession';\r",
							"pm.test('Response has expected check_session_iframe', () => {\r",
							"    pm.expect(responseData).to.have.property('check_session_iframe', expectedCheckSessionEndpoint);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						".well-known",
						"openid-configuration"
					]
				}
			},
			"response": [
				{
					"name": "Get OIDC metadata",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:11:21 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1567"
						}
					],
					"cookie": [],
					"body": "{\n    \"issuer\": \"https://cfs.example.com/cfs/oauth/stormwind\",\n    \"authorization_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/authorize\",\n    \"token_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/token\",\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_post\",\n        \"client_secret_basic\"\n    ],\n    \"userinfo_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/userinfo\",\n    \"response_types_supported\": [\n        \"code\",\n        \"token\",\n        \"id_token\",\n        \"id_token token\",\n        \"code id_token\",\n        \"code token\",\n        \"code id_token token\"\n    ],\n    \"response_modes_supported\": [\n        \"query\",\n        \"fragment\",\n        \"form_post\"\n    ],\n    \"subject_types_supported\": [\n        \"public\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"RS256\"\n    ],\n    \"jwks_uri\": \"https://cfs.example.com/cfs/oauth/stormwind/.well-known/keys\",\n    \"scopes_supported\": [\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"address\",\n        \"phone\",\n        \"groups\"\n    ],\n    \"claims_supported\": [\n        \"sub\",\n        \"name\",\n        \"given_name\",\n        \"family_name\",\n        \"middle_name\",\n        \"nickname\",\n        \"preferred_username\",\n        \"profile\",\n        \"picture\",\n        \"website\",\n        \"gender\",\n        \"birthdate\",\n        \"zoneinfo\",\n        \"locale\",\n        \"updated_at\",\n        \"address\",\n        \"email\",\n        \"email_verified\",\n        \"phone_number\",\n        \"phone_number_verified\",\n        \"groups\"\n    ],\n    \"end_session_endpoint\": \"https://cfs.example.com/cfs/oauth/stormwind/endsession\",\n    \"check_session_iframe\": \"https://cfs.example.com/cfs/oauth/stormwind/checksession\"\n}"
				}
			]
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus200();\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
							"\r",
							"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
							"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
							"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{refresh_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						"token"
					]
				}
			},
			"response": [
				{
					"name": "Refresh token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Content-Length",
							"value": "1248"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:11:45 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQzY2QzMjBlLTJiNjUtNDg3YS05ZGM3LTY3MTY3YWFmMzc2NCIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIGFkZHJlc3MgcGhvbmUgZ3JvdXBzIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MTIwNTk5MDUsImV4cCI6MTcxMjA2MDAyNSwiaWF0IjoxNzEyMDU5ODE1LCJpc3MiOiJodHRwczovL2Nmcy5leGFtcGxlLmNvbS9jZnMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9jZnMuZXhhbXBsZS5jb20vY2ZzL29hdXRoL3N0b3Jtd2luZCJ9.eAC6ugqB5tnAsjl8KQRrbE_XJgjlIGZ6zBdEM9hcUymaR_xpfXRA7Ll8oLmATN2lxO5cofdaSuUb6rWPBTWGz1wxITG4CDnNLFsBKZ4qd8ru14jJ87PYEW4CYH-m1cyAiIvVl9SIQxIpUYKgCC6QazwTeguCWVRgr2LKIo1zV-k6UyKqo1D1EYpAflfYtuf6bMaX7H9aXpA8cKAN-AKuTG343luQ8GQKm_G_D7KjqmSbhRky-IueIxmFL1tULAkOHmE3pflflhfxFkJR1gKMpGLUTRSrASFdXqG-o5bKYOaRJYy7AdHXN_Wz_UME4q6sxLQxYDcx6rpBlCly08m5Pw\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"utYV!IAAAAP_8Bo0mGU4__dCxXMjU4YY6kUmCZp4_DdD9rczbfdP1sQAAAAEt5Q2zknJ1GD69OxZzmQXLiMIJnDbImCURXtYMgzZ5o2rNP-JgSSzA1_Lwua4YmqNQc9gyh9jwkWii3ucs8ajroB2GfjPueE9AsLBE6LcXlECF8B1cIy9f059uTq-Vv7w4muMpsFNMCxcBTEVzeOJkssuD39T933iPv_gYcL60Ogexz4NOazdyteCDUIcrc0VbfqZaYdx_8AS2b5hvwRMEN0yw5TNvwCbP2LJ60QxPTg\",\n    \"scope\": \"openid email profile address phone groups\"\n}"
				}
			]
		},
		{
			"name": "UserInfo endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"const scopes = `${pm.variables.get('scope')}`.split(' ');\r",
							"\r",
							"const expectedIss = pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name');;\r",
							"pm.test('Response has expected iss', () => {\r",
							"    pm.expect(responseData).to.have.property('iss', expectedIss);\r",
							"});\r",
							"\r",
							"pm.test('Response has sub', () => {\r",
							"    pm.expect(responseData).to.have.property('sub');\r",
							"});\r",
							"\r",
							"const scopesMappings = {\r",
							"    profile: ['name', 'family_name', 'given_name', 'middle_name', 'preferred_username', 'nickname', 'profile', 'picture', 'website', 'gender', 'birthdate', 'zoneinfo', 'locale', 'updated_at'],\r",
							"    email: ['email', 'email_verified'],\r",
							"    address: ['address'],\r",
							"    phone: ['phone_number', 'phone_number_verified'],\r",
							"    groups: ['groups'],\r",
							"};\r",
							"\r",
							"Object.entries(scopesMappings).forEach(([scope, claimNames]) => {\r",
							"    if (scopes.indexOf(scope) !== -1) {\r",
							"        claimNames.forEach((claimName) => {\r",
							"            pm.test(`Response has ${claimName}`, () => {\r",
							"                pm.expect(responseData).to.have.property(claimName);\r",
							"            });\r",
							"        });\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						"userinfo"
					]
				}
			},
			"response": [
				{
					"name": "UserInfo endpoint",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"userinfo"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:02 GMT"
						},
						{
							"key": "Content-Length",
							"value": "236"
						}
					],
					"cookie": [],
					"body": "{\n    \"iss\": \"https://cfs.example.com/cfs/oauth/stormwind\",\n    \"sub\": \"varian.wrynn\",\n    \"name\": \"Varian Wrynn\",\n    \"family_name\": \"Wrynn\",\n    \"given_name\": \"Varian\",\n    \"email\": \"varian.wrynn@stormwind.zer\",\n    \"email_verified\": true\n}"
				}
			]
		},
		{
			"name": "Get JWT Keys",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus(200);\r",
							"\r",
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test('Response has valid structure', () => {\r",
							"    pm.expect(responseData).to.have.property('keys');\r",
							"    pm.expect(responseData.keys).to.be.an('Array');\r",
							"\r",
							"    responseData.keys.forEach(key => {\r",
							"        ['kid', 'kty', 'use', 'e', 'n', 'alg'].forEach(property => {\r",
							"            pm.expect(key).to.have.property(property);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						".well-known",
						"keys"
					]
				}
			},
			"response": [
				{
					"name": "Get JWT Keys",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								".well-known",
								"keys"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:25 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1349"
						}
					],
					"cookie": [],
					"body": "{\n    \"keys\": [\n        {\n            \"kid\": \"76764434-268c-433e-b931-be86f1eb81fb\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"ltc11OfTqLEorULFz7BHNQ9mDbIt7szzQyLRzlrNHxAlNynz2wnQ7kzA1tlDceJllKTDzf22rQ8Tk7XvVMqWfoEV4eLah_rLRcF14dnCV02myydm9JzaLofd5gTRnwdR1qbtbrVD2-wwC9o5IIC5ub149aklKEWhmeVTD1pjk-v0kqDbn6Bzfc-TUUInYkrkgHRruT1kEHc1c6VVE7fNWkDPFap4Xf2fZn0X4dbSsPY-znjfAFigiDUC5EFNCk6mGTKS-i9pzR-qBzp1XIXAQU831KHLT9VdRV6ghqKwvdDmOV2aN47YhXepsF1Z0-k9k4erCTIIFykw8eQHggd-5Q\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"a476ee25-a58e-4ee2-88e4-525c7710690e\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"uyDNMy0SbWLZjtwxyaSZjUouF2vtKko7qTb2msEo9ll2Uq-rn9OqN22i8SKjkXbo4u02UvJVD2qpcSw9X8qDluQMU3Q5LlqjGZCvrB9otJ9E3OLZOC1PU1cvJ_3VBZXxoJL0GBe0zDKeTE44IuF-uwuP10GbzgnlqxEG7LN18FRLej8kqZthw7i-rGd78C7oiQVuPSmpTSTJb-uBQt8tVotAiZ1tKGZhv71QBehddlE2tcddAGI8hOP8sV3_Uenal2uHCdP50PAHc6xFtXKl1LMwXW17Zj-TNh6BTj3qunHvt1qFyV51tihgsREK2jvPF2oK7c7NKFHvXEW3q9oucQ\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"d3cd320e-2b65-487a-9dc7-67167aaf3764\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"sqSR76TLiPi2uZgL2B5600SfF8tYIf_5mHluskWCyfpDDbYu5wIHAB7faxGSCCvxNK8SLSeqLK_GIT60ZPJrajaWiLrC1haOuMZv1iFqtsRN_HALbF88PDLqLENfz4stA10oHNfj926kPk_zijK-yP785mNpYmiXt7Yit7_gkqTssI9SqjUubhyhmXOrkaih-GesgcXjIIkm9gI6lE8TC5SiH21Rp57t7qDfnOyGS700qyos3lZor1KySG4PB_ubahN6czsSlenEU8SQfEP-Gl2MwyudQERGxKAAEwMAsOygFX30ouoMDi--JOGs4kWN3iIm7ksZD6TGXIQeQY0DJQ\",\n            \"alg\": \"RSA256\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revoke Application Access",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/Portal/Settings/RevokeApplicationAccess/{{Application Id}}",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"Portal",
						"Settings",
						"RevokeApplicationAccess",
						"{{Application Id}}"
					]
				}
			},
			"response": [
				{
					"name": "Revoke Application Access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/Portal/Settings/RevokeApplicationAccess/{{Application Id}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"Portal",
								"Settings",
								"RevokeApplicationAccess",
								"{{Application Id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private, s-maxage=0"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Tue, 02 Apr 2024 12:12:38 GMT"
						},
						{
							"key": "Content-Length",
							"value": "4"
						}
					],
					"cookie": [],
					"body": "true"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pmutils =",
					"    /**",
					"     * @param {Postman} pm",
					"     */",
					"    function (pm) {",
					"        return {",
					"            _oAuthVariableNameToCollectionVariableNameMap: Object.freeze({",
					"                access_token: \"access_token\",",
					"                code: \"authorization_code\",",
					"                id_token: \"id_token\",",
					"                refresh_token: \"refresh_token\",",
					"            }),",
					"",
					"            testCallbacks: Object.freeze({",
					"                testAuthorizationCode: (authorization_code) => {",
					"                    pm.test(\"Authorization code is valid\", () => {",
					"                        pm.expect(authorization_code).to.not.be.null;",
					"                        pm.expect(authorization_code).to.not.be.undefined;",
					"                    });",
					"                },",
					"",
					"                testAccessToken: (access_token, { expectedScopes } = {}) => {",
					"                    pm.test(\"Acess token is valid\", () => {",
					"                        pm.expect(access_token).to.not.be.null;",
					"                        pm.expect(access_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = access_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Access token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.variables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.variables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const aud = payload.aud;",
					"",
					"                            pm.expect(aud).to.be.equal(pm.variables.get('client_id'));",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"scope\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"scope\");",
					"",
					"                            if (expectedScopes) {",
					"                                const scopes = payload.scope.split(' ');",
					"                                if (expectedScopes.length !== scopes.length) {",
					"                                    pm.expect.fail(`Expected ${expectedScopes.length} scopes, but got ${scopes.length}`)",
					"                                }",
					"                                for (const scope of scopes) {",
					"                                    if (!expectedScopes.includes(scope)) {",
					"                                        pm.expect.fail(`Scope ${scope} was not expected`);",
					"                                    }",
					"                                }",
					"                            } else {",
					"                                pm.expect(payload.scope).to.be.equal(pm.variables.get('scope'));",
					"                            }",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testAccessTokenGrantsAccessToResources: (access_token) => {",
					"                    pm.test(\"Access token grants access to resources\", () => {",
					"                        pm.sendRequest(",
					"                            {",
					"                                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',",
					"                                method: 'GET',",
					"                                header: {",
					"                                    Authorization: 'Bearer ' + access_token",
					"                                }",
					"                            },",
					"                            (err, response) => {",
					"                                pm.expect(err).to.be.null;",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"                            }",
					"                        );",
					"                    });",
					"                },",
					"",
					"                testIdToken: (id_token) => {",
					"                    pm.test(\"Id token is valid\", () => {",
					"                        pm.expect(id_token).to.not.be.null;",
					"                        pm.expect(id_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = id_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Id token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.variables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.variables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const aud = payload.aud;",
					"",
					"                            pm.expect(aud).to.be.equal(pm.variables.get('client_id'));",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nonce\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nonce\", pm.variables.get(\"nonce\"), null);",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testRefreshTokenRefreshesTokens: (refresh_token) => {",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/token',",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: [{",
					"                                    key: 'client_id',",
					"                                    value: pm.variables.get('client_id'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'grant_type',",
					"                                    value: 'refresh_token',",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'client_secret',",
					"                                    value: pm.variables.get('client_secret'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'refresh_token',",
					"                                    value: refresh_token,",
					"                                    disabled: false,",
					"                                }]",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            pm.test(\"Refresh token grants new tokens\", () => {",
					"                                pm.expect(err).to.be.null;",
					"",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"",
					"                                const responseBody = response.json();",
					"                                pm.expect(responseBody).to.have.property('access_token');",
					"                                pm.expect(responseBody).to.have.property('refresh_token');",
					"                            });",
					"                        }",
					"                    );",
					"                },",
					"",
					"                testResponseStatus200: () => {",
					"                    pm.test(\"Response has status code 200\", () => {",
					"                        pm.expect(pm.response.code).to.be.equal(200);",
					"                    });",
					"                },",
					"",
					"                testResponseStatus200or302: () => {",
					"                    pm.test(\"Response has status code 200 or 302\", () => {",
					"                        pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
					"                    });",
					"                },",
					"",
					"                /**",
					"                 * @param {number} statusCode",
					"                 */",
					"                testResponseStatus: (statusCode) => {",
					"                    pm.test(`Response has status code ${statusCode}`, () => {",
					"                        pm.expect(pm.response.code).to.be.equal(statusCode);",
					"                    });",
					"                },",
					"            }),",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractPostAuthorizeRequestBodyFromResponse(response) {",
					"                const cheerio = require('cheerio');",
					"",
					"                const $ = cheerio.load(response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"                const isLoginRequired = targetUrl.endsWith('/authorizelogin');",
					"",
					"                const requestBody = {",
					"                    ...{",
					"                        __RequestVerificationToken: $form.find('input[name=\"__RequestVerificationToken\"]').attr('value'),",
					"                        IsApproved: true,",
					"                        client_id: $form.find('input[name=\"client_id\"]').attr('value'),",
					"                        redirect_uri: $form.find('input[name=\"redirect_uri\"]').attr('value'),",
					"                        state: $form.find('input[name=\"state\"]').attr('value'),",
					"                        scope: $form.find('input[name=\"scope\"]').attr('value'),",
					"                        response_type: $form.find('input[name=\"response_type\"]').attr('value'),",
					"                        response_mode: $form.find('input[name=\"response_mode\"]').attr('value'),",
					"                        nonce: $form.find('input[name=\"nonce\"]').attr('value'),",
					"                        code_challenge: $form.find('input[name=\"code_challenge\"]').attr('value'),",
					"                        code_challenge_method: $form.find('input[name=\"code_challenge_method\"]').attr('value'),",
					"                    },",
					"                    ...(isLoginRequired ? {",
					"                        Username: pm.variables.get('username'),",
					"                        Password: pm.variables.get('password'),",
					"                    } : {})",
					"                };",
					"",
					"                return requestBody;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             */",
					"            extractTokenVariablesFromResponse(response, urlQueryExtractionMode) {",
					"                switch (urlQueryExtractionMode) {",
					"                    case 'form':",
					"                        return this.extractTokenVariablesFromResponseBodyForm(response);",
					"                    case 'hash':",
					"                        return this.extractTokenVariablesFromResponseLocationHash(response);",
					"                    default:",
					"                    case 'query':",
					"                        return this.extractTokenVariablesFromResponseLocationQuery(response);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseBodyForm(response) {",
					"                const cheerio = require('cheerio');",
					"                const lodash = require('lodash');",
					"",
					"                const $ = cheerio.load(response.text());",
					"",
					"                const variablesMap = lodash(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .chain()",
					"                    .map((collectionVariableName, oAuthVariableName) => ({",
					"                        [collectionVariableName]: $(`input[name=\"${oAuthVariableName}\"]`).attr('value')",
					"                    }))",
					"                    .reduce(lodash.merge, {})",
					"                    .pickBy(value => !!value)",
					"                    .value()",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationHash(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.hash.split('#')[1];",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationQuery(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.query;",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {string} queryStringValue",
					"             */",
					"            extractTokenVariablesFromQueryString(queryStringValue) {",
					"                const qs = require('querystring');",
					"",
					"                const queryString = qs.parse(queryStringValue);",
					"                const variablesMap = Object.entries(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .filter(([oAuthVariableName]) => !!queryString[oAuthVariableName])",
					"                    .map(([oAuthVariableName, collectionVariableName]) => ({ [collectionVariableName]: queryString[oAuthVariableName] }))",
					"                    .reduce((x, y) => ({ ...x, ...y }), {});",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(variablesMap: object) => void} callback",
					"             */",
					"            postConfirmAuthorizeRequestIfNecessaryThenSetTokens(urlQueryExtractionMode = 'query', callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const locationHeaderValue = pm.response.headers.get('Location');",
					"                if (!locationHeaderValue) {",
					"                    const $ = cheerio.load(pm.response.text());",
					"                    const $form = $(\"form\");",
					"",
					"                    const URL = require('url');",
					"                    const cfsMasterUrl = URL.parse(pm.variables.get('CFS Master URL'));",
					"                    const targetUrl = `${cfsMasterUrl.protocol}//${cfsMasterUrl.host}` + $form.attr('action');",
					"",
					"                    const requestBody = this.extractPostAuthorizeRequestBodyFromResponse(pm.response);",
					"",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: targetUrl,",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: Object",
					"                                    .entries(requestBody)",
					"                                    .map(([key, value]) => ({",
					"                                        key: key,",
					"                                        value: value,",
					"                                        disabled: false,",
					"                                    }))",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            if (err) {",
					"                                console.error(err);",
					"                                return;",
					"                            }",
					"",
					"                            const variablesMap = this.extractTokenVariablesFromResponse(response, urlQueryExtractionMode);",
					"                            this.setCollectionVariables(variablesMap);",
					"                            this.setVisualizer(variablesMap);",
					"",
					"                            callback(variablesMap);",
					"                        }",
					"                    );",
					"                } else {",
					"                    const variablesMap = this.extractTokenVariablesFromResponse(pm.response, urlQueryExtractionMode);",
					"                    this.setCollectionVariables(variablesMap);",
					"                    this.setVisualizer(variablesMap);",
					"",
					"                    callback(variablesMap);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(response: require('postman-collection').Response) => void} callback",
					"             */",
					"            postDenyAuthorizeRequest(callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const $ = cheerio.load(pm.response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"",
					"                const requestBody =",
					"                {",
					"                    ...this.extractPostAuthorizeRequestBodyFromResponse(pm.response),",
					"                    IsApproved: false,",
					"                };",
					"",
					"                pm.sendRequest(",
					"                    {",
					"                        url: pm.variables.get('CFS Master URL') + targetUrl,",
					"                        method: 'POST',",
					"                        body: {",
					"                            mode: 'urlencoded',",
					"                            urlencoded: Object",
					"                                .entries(requestBody)",
					"                                .map(([key, value]) => ({",
					"                                    key: key,",
					"                                    value: value,",
					"                                    disabled: false,",
					"                                }))",
					"                        }",
					"                    },",
					"                    (err, response) => {",
					"                        if (err) {",
					"                            console.error(err);",
					"                            return;",
					"                        }",
					"",
					"                        callback(response);",
					"                    }",
					"                );",
					"            },",
					"",
					"            /**",
					"             * @param {object} variablesMap",
					"             */",
					"            setCollectionVariables(variablesMap) {",
					"                Object.entries(variablesMap)",
					"                    .forEach(([collectionVariableName, value]) => pm.collectionVariables.set(collectionVariableName, value));",
					"            },",
					"",
					"            /**",
					"             * @param {object} data",
					"             */",
					"            setVisualizer(data) {",
					"                console.log(data);",
					"                const tableTemplate = `",
					"                    <div style=\"overflow-wrap: break-word;\">",
					"                        ${Object.keys(data).map(key => `<div class=\"row\" style=\"margin-bottom: 1rem;\"><div class=\"two columns\">${key}</div><div class=\"ten columns\">{{${key}}}</div></div>`).reduce((x, y) => x + y)}",
					"                    </div>",
					"                    `.trim();",
					"                pm.visualizer.set(tableTemplate, data);",
					"            },",
					"        };",
					"    }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CFS Master URL",
			"value": "https://cfs01.example.com/cfs",
			"type": "string"
		},
		{
			"key": "Application Id",
			"value": "1f734c83-3ca4-433e-bfb0-27bc711f3b4e",
			"type": "string"
		},
		{
			"key": "Tenant Name",
			"value": "mytenant",
			"type": "string"
		},
		{
			"key": "username",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "resource_owner_password_credentials_username",
			"value": "john.doe",
			"type": "string"
		},
		{
			"key": "password",
			"value": "MyPassword123!",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "stLJwW9b3L5BPaiFFVx9cB",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "jqvQwFVQgK92xRg4D1DryiiO7F3X5Hl6UeYZE4fZUQ95",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "openid email profile",
			"type": "string"
		},
		{
			"key": "state",
			"value": "6879bf2ef296d720f3a54eb8faabee9c",
			"type": "string"
		},
		{
			"key": "nonce",
			"value": "c4fdef35f2e05abe2ceb88ae0f743ee4",
			"type": "string"
		},
		{
			"key": "redirect_uri",
			"value": "https://oauth.pstmn.io/v1/callback",
			"type": "string"
		},
		{
			"key": "code_challenge",
			"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI",
			"type": "string"
		},
		{
			"key": "code_verifier",
			"value": "MR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
			"type": "string"
		},
		{
			"key": "code_method",
			"value": "S256",
			"type": "string"
		},
		{
			"key": "authorization_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "id_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "validations_common_response_type",
			"value": "code",
			"type": "string"
		}
	]
}
