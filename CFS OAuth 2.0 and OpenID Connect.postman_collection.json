{
	"info": {
		"_postman_id": "99b90132-8042-4516-b4b7-44ae06ff2924",
		"name": "CFS OAuth 2.0 and OpenID Connect",
		"description": "This postman collection is used to try out the **OpenID Connect feature of CFS**.\n\n## Pre-requisities\n\n- Configure an OpenID Connect Application in CFS.\n    - Go to **Administration -> Applications -> OpenID Connect**\n        \n        <img src=\"https://content.pstmn.io/8135220b-8129-4db7-b70d-5b14eac68332/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - Click the \"New OpenID Connect Application\" button\n    - Fill in the fields\n        \n        <img src=\"https://content.pstmn.io/0049d2a0-4d58-4d20-8bea-2588ef7d2a8d/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n        \n    - For the Callback URL field, use the value: `https://oauth.pstmn.io/v1/callback`\n- Fill in the Postman Collection Variables with appropriate values for `CFS Master URL`, `Tenant Name`, `client_id`, `client_secret`, `username`, and `password` respectively.\n    \n    <img src=\"https://content.pstmn.io/79d7290f-e98b-48d5-b811-fa76f09c6da5/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n    <img src=\"https://content.pstmn.io/62a83ecf-0335-42c0-beb1-0e9abfc74501/aW1hZ2UucG5n\" width=\"1619\" height=\"924\">\n    \n\nNow you can test the OAuth requests directly in Postman.\n\n## Collection Variables\n\n| **Variable Name** | **Current Value** | **Description** |\n| --- | --- | --- |\n| CFS Master URL | {{CFS Master URL}} | The base URL for the CFS Master instance |\n| Tenant Name | {{Tenant Name}} | The name of the CFS tenant |\n| username | {{username}} | The username used to log in to the CFS Master tenant's portal |\n| password | {{password}} | The password used to log in to the CFS Master tenant's portal |\n| client_id | {{client_id}} | The client identifier  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.2](https://datatracker.ietf.org/doc/html/rfc6749#section-2.2) |\n| client_secret | {{client_secret}} | The client secret  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-2.3.1) |\n| scope | {{scope}} | The space separated list of requested scopes  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.3](https://datatracker.ietf.org/doc/html/rfc6749#section-3.3) |\n| state | {{state}} | State parameter used for protection against CSRF  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-10.12](https://datatracker.ietf.org/doc/html/rfc6749#section-10.12) |\n| nonce | {{nonce}} | Nonce parameter used for protection agaisnt replay attacks  <br>[https://openid.net/specs/openid-connect-core-1_0.html#IDToken](https://openid.net/specs/openid-connect-core-1_0.html#IDToken) |\n| redirect_uri | {{redirect_uri}} | The callback URL configured for the OIDC Application  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2) |\n| code_challenge | `{{code_challenge}}` | Code Challenge for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.2](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2) |\n| code_verifier | `{{code_verifier}}` | Code Verifier for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.1](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1) |\n| code_method | {{code_method}} | Code Challenge Method for PKCE  <br>[https://datatracker.ietf.org/doc/html/rfc7636#section-4.3](https://datatracker.ietf.org/doc/html/rfc7636#section-4.3) |\n| authorization_code | `{{authorization_code}}` | **This variable is managed by the Postman Collection itself, do not modify it manually!**  <br>  <br>The OAuth authorization code  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1](https://datatracker.ietf.org/doc/html/rfc6749#section-1.3.1) |\n| id_token | `{{id_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OIDC Id token  <br>[https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse](https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse) |\n| access_token | `{{access_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth acess token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n| refresh_token | `{{refresh_token}}` | **This variable is managed by the collection itself, do not modify it manually!**  <br>  <br>The OAuth refresh token  <br>[https://datatracker.ietf.org/doc/html/rfc6749#section-5.1](https://datatracker.ietf.org/doc/html/rfc6749#section-5.1) |\n\nThe \"Authorize\" requests will automatically set the values for the `authorization_code`, `id_token`, `access_token` collection variable(s), while the \"Request for tokens\" requests will automatically set the values for the `id_token`, `access_token`, and `refresh_token` collections variable(s) where appropriate.\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in the \"[Implicit Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-0adeda1d-0730-496d-b6d8-79fd4cb9ee10?ctx=documentation)\" and \"[Hybrid Flow](https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/folder/25667693-38b7714c-3ef1-4f1f-9f42-14ac1e5d6c0b?ctx=documentation)\" folders!\n\n<img src=\"https://content.pstmn.io/bb3aa626-370b-4bfc-88b9-b0daec95b702/aW1hZ2UucG5n\" width=\"846\" height=\"840\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25667693",
		"_collection_link": "https://speeding-sunset-964902.postman.co/workspace/CFS5~8ebc958a-523b-46bd-931a-968060aa59a4/collection/25667693-99b90132-8042-4516-b4b7-44ae06ff2924?action=share&source=collection_link&creator=25667693"
	},
	"item": [
		{
			"name": "Authorization code flow",
			"item": [
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "Invalid client id /authorize",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// const cheerio = require('cheerio');\r",
													"const $ = cheerio.load(pm.response.text());\r",
													"\r",
													"const title = $('title').text();\r",
													"\r",
													"pm.test('Title should contain \"An Error Happened\"', () => {\r",
													"    pm.expect(title).to.contain('An Error Happened');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id=invalidClientId&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "invalidClientId"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								}
							]
						},
						{
							"name": "Invalid callback url",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// const cheerio = require('cheerio');\r",
													"const $ = cheerio.load(pm.response.text());\r",
													"\r",
													"const title = $('title').text();\r",
													"\r",
													"pm.test('Title should contain \"An Error Happened\"', () => {\r",
													"    pm.expect(title).to.contain('An Error Happened');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://invalid.callback.url.example.com/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://invalid.callback.url.example.com/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								}
							]
						},
						{
							"name": "# Invalid scope",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope=profile invalidScope&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "profile invalidScope"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								}
							]
						},
						{
							"name": "Invalid client id /token",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus(401);\r",
													"\r",
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Response body has error \"invalid_client\"', () => {\r",
													"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "invalidClientId",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Invalid client secret",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus(401);\r",
													"\r",
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Response body has error \"invalid_client\"', () => {\r",
													"    pm.expect(responseData).to.have.property('error', 'invalid_client');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "invalidClientSecret",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Invalid authorization code",
							"item": [
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
													"\r",
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Response body has error \"invalid_request\"', () => {\r",
													"    pm.expect(responseData).to.have.property('error', 'invalid_request');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "invalidAuthorizationCode",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Invalid response access token",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200();\r",
													"\r",
													"// pretend the server responded with an invalid access token\r",
													"const access_token = \"invalidAccessToken\";\r",
													"pm.test(\"Invalid access token decoding fails\", () => {\r",
													"    const atob = require('atob');\r",
													"\r",
													"    pm.expect(() => JSON.parse(atob(access_token))).to.throw();\r",
													"});\r",
													"\r",
													"pm.sendRequest(\r",
													"    {\r",
													"        url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            Authorization: 'Bearer ' + access_token\r",
													"        }\r",
													"    },\r",
													"    (err, response) => {\r",
													"        pm.test(\"Invalid access token does not grant access to resources\", () => {\r",
													"            pm.expect(err).to.be.null;\r",
													"            if (err) {\r",
													"                console.error(err);\r",
													"                return;\r",
													"            }\r",
													"\r",
													"            pm.expect(response.code).to.be.equal(401);\r",
													"        });\r",
													"    }\r",
													");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Invalid response id token",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200();\r",
													"\r",
													"// pretend the server responded with an invalid id token\r",
													"const id_token = \"invalidIdToken\";\r",
													"pm.test(\"Invalid id token decoding fails\", () => {\r",
													"    const atob = require('atob');\r",
													"\r",
													"    pm.expect(() => JSON.parse(atob(id_token))).to.throw();\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "Invalid response refresh token",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "response_type",
													"value": "code",
													"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "700"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:21 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200();\r",
													"\r",
													"// pretend the server responded with an invalid refresh token\r",
													"const refresh_token = \"invalidRefreshToken\";\r",
													"pm.test(\"Invalid access token decoding fails\", () => {\r",
													"    const atob = require('atob');\r",
													"\r",
													"    pm.expect(() => JSON.parse(atob(refresh_token))).to.throw();\r",
													"});\r",
													"\r",
													"pm.sendRequest(\r",
													"    {\r",
													"        url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/token',\r",
													"        method: 'POST',\r",
													"        body: {\r",
													"            mode: 'urlencoded',\r",
													"            urlencoded: [{\r",
													"                key: 'client_id',\r",
													"                value: pm.variables.get('client_id'),\r",
													"                disabled: false,\r",
													"            },\r",
													"            {\r",
													"                key: 'grant_type',\r",
													"                value: 'refresh_token',\r",
													"                disabled: false,\r",
													"            },\r",
													"            {\r",
													"                key: 'client_secret',\r",
													"                value: pm.variables.get('client_secret'),\r",
													"                disabled: false,\r",
													"            },\r",
													"            {\r",
													"                key: 'refresh_token',\r",
													"                value: refresh_token,\r",
													"                disabled: false,\r",
													"            }]\r",
													"        }\r",
													"    },\r",
													"    (err, response) => {\r",
													"        pm.test(\"Invalid refresh token does not grant new tokens\", () => {\r",
													"            pm.expect(err).to.be.null;\r",
													"            if (err) {\r",
													"                console.error(err);\r",
													"                return;\r",
													"            }\r",
													"\r",
													"            pm.expect(response.code).to.be.equal(400);\r",
													"        });\r",
													"    }\r",
													");\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:32 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code",
									"description": "Response type is \"code\" for the authorization code grant type\nhttps://datatracker.ietf.org/doc/html/rfc6749#section-4.1.1"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
					},
					"response": [
						{
							"name": "Authorize",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?response_type=code&client_id={{client_id}}&redirect_uri=https://oauth.pstmn.io/v1/callback&scope={{scope}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "700"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Feb 2024 13:06:21 GMT"
								}
							],
							"cookie": [],
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAAFDGtDU3pOruZ-SA_mLEL8hwAnZaU5_lgqetCIfcS5rYIQEAAAETimIiwLo9bN8xSuyPVHhQUaDrftNGqKxqAOa5y0POE7vteyI2c7s_kW4x00EhXNGVdRFQFEbyAt6wU4F_QGyb9AORIC8sajdkAr24rU7IEn0dlI3j1jLrxo9UykAor6i6o3OMiKMEwaCj_EVFndd4wj3iBVsOh7JrVXXkvA5y_ZT0Gb7V8xVb0EsnzNmerTk4P-2R_T5pYMzdEjLH3KSJhpPIK2B781Y6rqly4kwSEPAYIITM78Z_l36tkgK0Q3Fid7pZxFFz2P-9YtcWTZ24Vf5ZxnNBJ6tzIcJb6JVsSudQyxD9nZfw6nVGDkJ6yIJjSz0pBMFYEIduemy8gqhckbIW2O9vIL0P-Zimzim4FXWi6HXpY3j8GMvEywrRT8s&session_state=KUrFlfKOVV1Ua4f8JnANCmjzJ6C_TyOngDxSoY5Kf90.82957585165879FE1E1BEA4569E98422&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
					},
					"response": [
						{
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2165"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Feb 2024 13:06:32 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzOTEsImV4cCI6MTcwODAwMjUxMSwiaWF0IjoxNzA4MDAyMzgxLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.bWb9XhbrF9G6svUv0ZPewc3VvM66CHDQKnP4CJi1PxvM8pOHgzT6CBkm4UiE0F--tAHt5MRCzOeFl-taRIw07TLh_mVwVkvofG7dziI8dkZ8OzIH9fBnU3juSZjBNDFx5mVb5iJFpsaCSE6QccIX7mKvLezXnYXDDrE2JYJO63pCjvLh9k870qmWExTSi3XQBObtnF0CJl76N2U3iDgQ5CEAd9Ulur9E1xzpTHPGZqaBI6DHWA5E0OtIu26V0RGMAZkNcHw1zkU5f958HDRaAjia6VtZvXL8fUbJw16gKWNN_KHgzs1J3HjR0L_Id7TQmRHGA6BAq5EIqukvECi3Mg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAG7kYOxT2gZTHajAjnW_mMJjn88t5FhvSGhg-QALzJLt0QAAAAHl93_YZX90Lk2DQWQUylOqZRjL8UeTvnMErtqvFd9vu9pinVOJg7UYe94vNH5R9GNt0LJiY5rHA2FCzGWH1qOTvQvZGWs2dUQNGwNlj3nMA9MAx3_dZuwytqe3zNaBUytOoEqoU1P4eOYCM8BbKTJdtIVBbK3mbA99IULF8jaVJR26nG7MFnjQgoZH5P5HlVNj1s9g628IdkSVuZuNH-41IznYSoKtOgWn5cuZ497-i_EzBu3lmR3Edfd0OF33eMFQuvKBfGNKCu-TesXeVW5w\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoidVZoQ1gycnhaMUNuWkxmTngxdnNTQSIsImF0X2hhc2giOiJNT2xRV1N1QnpFR1VoUW80NFZ6WU93IiwibmJmIjoxNzA4MDAyMzkyLCJleHAiOjE3MDgwMDM1OTIsImlhdCI6MTcwODAwMjM5MiwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.SHGgxUGURhyHTaavYejG7TtWmhGNtn11DlbVQVW0ayoBsAB2gFLQ3JVuuKhz-BR-zXh96mcA_QGBlXLBCnZ5TSmz5CsLA4GZ2ikxSPz5OygVffVcazp3LB0qJFNqsZvarf7OJQatKzH1OHxcOmPiBlqieQJtLm_VjJzJ3UnIPoezi8Yj20v9VMPvhdjb9gN3JQov-rFjBIBH-VY7fgg2Mwwi42OIXVQnjFS6_u5e3Q77o-SlJHuIFrRQUpnlZa9a-6cMTosjtCDljd-Lb-X1c5Pi6bOV-Cj_NAl3KslmIuo9IAKe438hvlaAZX2fzjUJIz035tWX7kbbLigbHk3KWw\",\n    \"scope\": \"openid email profile\"\n}"
						}
					]
				}
			],
			"description": "- Run the \"GET Authorize\" request\n    - The response will contain an `authorization_code` that will be automatically captured and set as a collection variable to be used by the next request\n- Run the \"POST Request for tokens\" request\n    - The response will contain an `access_token`, `id_token`, `refresh_token` that will be automatically captured and set as collection variables to be used for any subsequent requests that require authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authorization code flow with PKCE",
			"item": [
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "# Invalid code challenge",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge=invalidCodeChallenge!@rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=S256&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "code_challenge",
													"value": "invalidCodeChallenge!@rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "{{code_challenge}}"
														},
														{
															"key": "code_challenge_method",
															"value": "{{code_method}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "785"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:02 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								}
							]
						},
						{
							"name": "Invalid code verifier",
							"item": [
								{
									"name": "Authorize",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
													"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge=rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI&code_challenge_method=S256&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "code_challenge",
													"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI"
												},
												{
													"key": "code_challenge_method",
													"value": "S256"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
									},
									"response": [
										{
											"name": "Authorize",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "code"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "code_challenge",
															"value": "{{code_challenge}}"
														},
														{
															"key": "code_challenge_method",
															"value": "{{code_method}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "Found",
											"code": 302,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "785"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Location",
													"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:02 GMT"
												}
											],
											"cookie": [],
											"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
										}
									]
								},
								{
									"name": "Request for tokens",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus(400);\r",
													"\r",
													"const responseData = pm.response.json();\r",
													"\r",
													"pm.test('Response body has error \"invalid_grant\"', () => {\r",
													"    pm.expect(responseData).to.have.property('error', 'invalid_grant');\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "invalidCodeVerifierMR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										},
										"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to openid email profile\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
									},
									"response": [
										{
											"name": "Request for tokens",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorization_code}}",
															"type": "text"
														},
														{
															"key": "grant_type",
															"value": "authorization_code",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "code_verifier",
															"value": "{{code_verifier}}",
															"type": "text"
														},
														{
															"key": "state",
															"value": "{{state}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"token"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Cache-Control",
													"value": "no-cache, no-store, max-age=0, must-revalidate"
												},
												{
													"key": "Pragma",
													"value": "no-cache"
												},
												{
													"key": "Content-Length",
													"value": "2165"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Thu, 15 Feb 2024 13:06:13 GMT"
												}
											],
											"cookie": [],
											"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzNzIsImV4cCI6MTcwODAwMjQ5MiwiaWF0IjoxNzA4MDAyMzYyLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.DiyhCTj2BWR70fUA7IIy10eTqsU2WMEMgbW4Ce1ISOVRM0G9CVcaUSzZSdoYXFQnQDG8_43ZZg92XPIXFqqS3tb4x4jM1FgqgHegiPViffBsTg5DbGRbXokg5Sz5fYrAVklfo3e8-dQgNKt8oYzKSCchobmzvCTguAfnh3qByODT0ciqI9kmUYozqWEczHQpW7rnKsge4q2X5Cb8t1zh-wU4oVX63RV69HkMBkTLk1wrYZt7jwNjgziJO7zFMqSVrpS7KUR7OpCBeHYEmK3USEEYjCMJPnmuxr2HRcjuVi1hEP8fBmPTwDAN0CRpERm-Da-JyDJCyO7ymAOWCpsR8A\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAJ6CRC3l6te9awUJAs9hJAMA_pqs2bwUEOsQHNzPd93L0QAAAAF694dcI_Lwr0YLgTnB_kGc575ouFJRKOJ50mo_p8ajUwKqa7aVm_-xdbmbPrdCc0R9fQGNpYNJXLL6lkaXBtWQIdIS5M3n9fVQFLH9vQk01DJU8EnnueHPzJGRcJROAlNWgUkTiMc9eMageU_FoPwNRhgaq8_fPOCsOmx6oLqat8h6-2o3-S_yeg65Ax-a9qvEse5SeShbxOnv5jNCIB6jwoNdVOMZgUucxRzxX_DhHcnvH-BdEN8xFaRDfHvf4dZ5-ntyvKuus9hKLliGtCt_\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoib2pPd3ZjSWRjUDZSVVVteDZNMm4xZyIsImF0X2hhc2giOiIxX0Y5SEcyZHRPejhYNWNfSDlISXhnIiwibmJmIjoxNzA4MDAyMzczLCJleHAiOjE3MDgwMDM1NzMsImlhdCI6MTcwODAwMjM3MywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.O1rbSp-3DtisCeWMogMD0UeZy4HrwgAknjfD9Q_sfzpw4oYSqMQtgW-9kuedJKAWsGAUXPW3FkZ0-joOt6wpeqKLEyDRb22o1MGPsbe1YSaI_p_4mgSvzCgY7jazF124urZU3flunP5PHB7pFV0UJj2-WbWfRY0mlDG4ZxMH9u2NUKqGKKrCRCqt3Gi0MlP2VVGf9zY1hWvqaEa4opkxMEa4uhJGkEtYsHEFsSVZJT9HhYBG-8qAjAE8toUKHOyl7Xcfdh2jAeqkkCk7W3OM6Cdgy3aAFJKoTEpChAWKniFiQyLdjrCaJijKQ7wGbeAKLdEbOOOxjpVjg9Ze1KTfOg\",\n    \"scope\": \"openid email profile\"\n}"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('query', ({ authorization_code }) => {\r",
									"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "code_challenge",
									"value": "{{code_challenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "{{code_method}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_If necessary, the consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 302\n    - The `authorization_code` is expected to not be empty"
					},
					"response": [
						{
							"name": "Authorize",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&code_challenge={{code_challenge}}&code_challenge_method={{code_method}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "code_challenge",
											"value": "{{code_challenge}}"
										},
										{
											"key": "code_challenge_method",
											"value": "{{code_method}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "785"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Feb 2024 13:06:02 GMT"
								}
							],
							"cookie": [],
							"body": "<html>\n    <head>\n        <title>Object moved</title>\n    </head>\n    <body>\n        <h2>Object moved to \n            <a href=\"https://oauth.pstmn.io/v1/callback?code=spDV%21IAAAALZfLXYWa9u7c8o0I3kjaOB5foc0HAzAfnScKf7ZyuUVYQEAAAEvau30Oa6gI2q5SSId0MZ9WB2_M-OVidDEs0PEWhSHHi8Vy2GFyCHCjkH3_mG6dwS0-MRUqZCwiUyCmhs_y1ulsBCnDhP0a3i1nHnNoMeMDIC8YpjfRvQE99wKVoH6bPT8Jbu9XjjDftyhoOHsbqsLwwi0sByc5DnhLfN0dqLdydNlSXtnSe1M9y-Ma7nRtrkcKsqUSP4VSrNlq1PFD6VNBWcxOHZQFmKLIWUIPjpmOCC8xZ6RoC69J9DuhN_afAn3vhUreIIHPDQwNo4f2PRZAL36CVKsufdp9yJfZrlidpgrUMtKSC2qgmDBJvl_7ioNFsprz2fIS5o7iaE8A6RVpMPrtqMF9IuGr7hUFJ4F2XpsOgR82zxHnOedwzZVGODS1TUk1eaAw9MnIR47kDuxzL9SLbcsFLLaWlKIbRX64iwEMeuGcTtCIWQtqXsXP1NxxpH0-xxtoNt7E-Vzb_nt&session_state=YpgOrThrvno9qjf7UzNMMf9THQ840We50yLHg6Iz11Y.E82AC1AC68FA8B072C1CD874B0B062F5&state=abc\">here</a>.\n        </h2>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Request for tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();\r",
									"\r",
									"const responseData = JSON.parse(responseBody);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
									"\r",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
									"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
									"\r",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
									"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to openid email profile\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
					},
					"response": [
						{
							"name": "Request for tokens",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code_verifier}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "2165"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Thu, 15 Feb 2024 13:06:13 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDgwMDIzNzIsImV4cCI6MTcwODAwMjQ5MiwiaWF0IjoxNzA4MDAyMzYyLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.DiyhCTj2BWR70fUA7IIy10eTqsU2WMEMgbW4Ce1ISOVRM0G9CVcaUSzZSdoYXFQnQDG8_43ZZg92XPIXFqqS3tb4x4jM1FgqgHegiPViffBsTg5DbGRbXokg5Sz5fYrAVklfo3e8-dQgNKt8oYzKSCchobmzvCTguAfnh3qByODT0ciqI9kmUYozqWEczHQpW7rnKsge4q2X5Cb8t1zh-wU4oVX63RV69HkMBkTLk1wrYZt7jwNjgziJO7zFMqSVrpS7KUR7OpCBeHYEmK3USEEYjCMJPnmuxr2HRcjuVi1hEP8fBmPTwDAN0CRpERm-Da-JyDJCyO7ymAOWCpsR8A\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAAJ6CRC3l6te9awUJAs9hJAMA_pqs2bwUEOsQHNzPd93L0QAAAAF694dcI_Lwr0YLgTnB_kGc575ouFJRKOJ50mo_p8ajUwKqa7aVm_-xdbmbPrdCc0R9fQGNpYNJXLL6lkaXBtWQIdIS5M3n9fVQFLH9vQk01DJU8EnnueHPzJGRcJROAlNWgUkTiMc9eMageU_FoPwNRhgaq8_fPOCsOmx6oLqat8h6-2o3-S_yeg65Ax-a9qvEse5SeShbxOnv5jNCIB6jwoNdVOMZgUucxRzxX_DhHcnvH-BdEN8xFaRDfHvf4dZ5-ntyvKuus9hKLliGtCt_\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImZkOGU4NmYwLWQ0YjMtNDBkZC1iYWYyLTFjNjE2MDNkYzRlNiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoib2pPd3ZjSWRjUDZSVVVteDZNMm4xZyIsImF0X2hhc2giOiIxX0Y5SEcyZHRPejhYNWNfSDlISXhnIiwibmJmIjoxNzA4MDAyMzczLCJleHAiOjE3MDgwMDM1NzMsImlhdCI6MTcwODAwMjM3MywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoic3RMSndXOWIzTDVCUGFpRkZWeDljQiJ9.O1rbSp-3DtisCeWMogMD0UeZy4HrwgAknjfD9Q_sfzpw4oYSqMQtgW-9kuedJKAWsGAUXPW3FkZ0-joOt6wpeqKLEyDRb22o1MGPsbe1YSaI_p_4mgSvzCgY7jazF124urZU3flunP5PHB7pFV0UJj2-WbWfRY0mlDG4ZxMH9u2NUKqGKKrCRCqt3Gi0MlP2VVGf9zY1hWvqaEa4opkxMEa4uhJGkEtYsHEFsSVZJT9HhYBG-8qAjAE8toUKHOyl7Xcfdh2jAeqkkCk7W3OM6Cdgy3aAFJKoTEpChAWKniFiQyLdjrCaJijKQ7wGbeAKLdEbOOOxjpVjg9Ze1KTfOg\",\n    \"scope\": \"openid email profile\"\n}"
						}
					]
				}
			],
			"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Implicit Flow",
			"item": [
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "User denies consent",
							"item": [
								{
									"name": "Authorize - id_token token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postDenyAuthorizeRequest(response => {\r",
													"    const URL = require('url');\r",
													"    const qs = require('querystring');\r",
													"\r",
													"    const responseLocation = response.headers.get('Location');\r",
													"    const url = URL.parse(responseLocation);\r",
													"    const queryStringValue = url.query;\r",
													"    const queryString = qs.parse(queryStringValue);\r",
													"\r",
													"    pm.test(\"Response location has query string parameter \\\"error=access_denied\\\"\", () => {\r",
													"        pm.expect(queryString).to.have.property('error', 'access_denied');\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "These tests simulate the case where the user would deny consent, i.e. clicking the \"Cancel\" button on the consent screen\n\n<img src=\"https://content.pstmn.io/6258ac22-09a1-4f5b-8ecf-35a397b0c33c/aW1hZ2UucG5n\" alt=\"\" height=\"924\" width=\"1619\">"
						},
						{
							"name": "Expired access token",
							"item": [
								{
									"name": "Authorize - id_token token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
													"\r",
													"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
													"    const atob = require('atob');\r",
													"    const jwtPayload = JSON.parse(atob(access_token.split('.')[1]));\r",
													"    const exp = jwtPayload.exp;\r",
													"    // Wait until exp + 1 second\r",
													"    const wait = (exp * 1000 - Date.now()) + 1000;\r",
													"\r",
													"    console.log(`Waiting ${wait}ms for access token to expire...`);\r",
													"    setTimeout(() => {\r",
													"        pm.sendRequest(\r",
													"            {\r",
													"                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',\r",
													"                method: 'GET',\r",
													"                header: {\r",
													"                    Authorization: 'Bearer ' + access_token\r",
													"                }\r",
													"            },\r",
													"            (err, response) => {\r",
													"                pm.test(\"Expired access token does not grant access to resources\", () => {\r",
													"                    pm.expect(err).to.be.null;\r",
													"                    if (err) {\r",
													"                        console.error(err);\r",
													"                        return;\r",
													"                    }\r",
													"\r",
													"                    pm.expect(response.code).to.be.equal(401);\r",
													"                });\r",
													"            }\r",
													"        );\r",
													"    }, wait);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "id_token token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										},
										"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
									},
									"response": [
										{
											"name": "Authorize - id_token token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
													"host": [
														"{{CFS Master URL}}"
													],
													"path": [
														"oauth",
														"{{Tenant Name}}",
														"authorize"
													],
													"query": [
														{
															"key": "scope",
															"value": "{{scope}}"
														},
														{
															"key": "response_type",
															"value": "id_token token"
														},
														{
															"key": "redirect_uri",
															"value": "https://oauth.pstmn.io/v1/callback"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}"
														},
														{
															"key": "state",
															"value": "{{state}}"
														},
														{
															"key": "nonce",
															"value": "{{nonce}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "html",
											"header": [
												{
													"key": "Cache-Control",
													"value": "private"
												},
												{
													"key": "Content-Type",
													"value": "text/html; charset=utf-8"
												},
												{
													"key": "Content-Encoding",
													"value": "gzip"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "Microsoft-IIS/10.0"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Access-Control-Allow-Headers",
													"value": "authorization"
												},
												{
													"key": "X-Frame-Options",
													"value": "SAMEORIGIN"
												},
												{
													"key": "X-SourceFiles",
													"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
												},
												{
													"key": "X-Powered-By",
													"value": "ASP.NET"
												},
												{
													"key": "Date",
													"value": "Wed, 13 Mar 2024 14:00:48 GMT"
												},
												{
													"key": "Content-Length",
													"value": "1861"
												}
											],
											"cookie": [],
											"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"aRbF0d3sxVT2yOGDWN2EE2jjkdH7ifCTBzkRBEa7t2YwzeHA6gOVDxIQTpe03Q8JZGyShHzbjb9fXP5l9jyNXChRX33vQp12kLU8jZJDsZ6TeExidcyUfm_A1SGcpJay5JUPIn5V3Y0nqTC7Eq3-EQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Authorize - id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "id_token"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `id_token` in the **Response -> Body -> Visualize** tab\n    - The `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
					},
					"response": [
						{
							"name": "Authorize - id_token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:00:27 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1849"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"xXaOWcYjqfsENIXRo5exm1yvDK4lzWgZl_Fhe6yU40Zvn2RV6I4rtubI8dCliSLDSUYqaRIpC2oRLR64CgL9aOE70eWTzFZGU_XaTZrf4bB0dehCxt30yVHu5VL77QzdOJMalImcfayzYxYxFc5noA2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
						}
					]
				},
				{
					"name": "Authorize - id_token token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
									"\r",
									"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('hash', ({ access_token, id_token }) => {\r",
									"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
									"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
									"\r",
									"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope}}"
								},
								{
									"key": "response_type",
									"value": "id_token token"
								},
								{
									"key": "redirect_uri",
									"value": "https://oauth.pstmn.io/v1/callback"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}"
								},
								{
									"key": "state",
									"value": "{{state}}"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}"
								}
							]
						},
						"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Implicit Flow\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to stLJwW9b3L5BPaiFFVx9cB\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to xyz\n    - Id token is valid\n        - if all the above tests are passing"
					},
					"response": [
						{
							"name": "Authorize - id_token token",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "id_token token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "html",
							"header": [
								{
									"key": "Cache-Control",
									"value": "private"
								},
								{
									"key": "Content-Type",
									"value": "text/html; charset=utf-8"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:00:48 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1861"
								}
							],
							"cookie": [],
							"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"aRbF0d3sxVT2yOGDWN2EE2jjkdH7ifCTBzkRBEa7t2YwzeHA6gOVDxIQTpe03Q8JZGyShHzbjb9fXP5l9jyNXChRX33vQp12kLU8jZJDsZ6TeExidcyUfm_A1SGcpJay5JUPIn5V3Y0nqTC7Eq3-EQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
						}
					]
				}
			],
			"description": "Run any of the \"GET Authorize\" requests\n\n**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e3542bce-db42-4b74-b2b5-6a4a0cabd789/aW1hZ2UucG5n\" width=\"846\" height=\"840\">"
		},
		{
			"name": "Hybrid Flow",
			"item": [
				{
					"name": "Hybrid flow - code id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code id_token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `id_token` in the **Response -> Body -> Visualize** tab\n    - The `authorization_code`, `id_token` will be extracted from the callback url and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n    - The `authorization_code` is expected to not be empty\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        \n        - if all the above tests are passing"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:06 GMT"
										},
										{
											"key": "Content-Length",
											"value": "1863"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=code%20id_token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"HT712wN4eozgFPTrb2y2_izjEVH0TpOEk0wiqJk_Q6RKIXxNtL0yeqWVnbsJLVBAKVUW3ltCjNU7rke2N6JjRCGVyWbKJt8jQKjcSi8w3723OhO-a4qEV0VJffWgdGK31H2YqPhBa8afCEr8DhplWw2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n            \n    - Refresh token grants new tokens\n        \n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2165"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:19 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6IjFzMm85ODVsSWYyRmEyRGk1WmcwbUoiLCJuYmYiOjE3MTAzMzg0NzksImV4cCI6MTcxMDMzODU5OSwiaWF0IjoxNzEwMzM4NDY2LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.QDeEnx9LhrbJOEkYw-mZxFkXxRHD6GIR47FzjbBDB_17CTc8ZJVZttW5Mpvq_47A5oG_rMORGc53yriuDtHx62Xwmfr-liP32x5LVHaMwPbsytCrJuk4oTyDr2unOj6buNCHMZdZlCrPU8wxLBxVnzxfY19eHw3-nasZGZO_8pjOp5e32Xw81stflD01qZ-oynlxghRxHXt23d_f-iCFdcAuXz2q-QNQ2OuW22N9Au9i0fcq8OJ-kHCuuIsfc4c8AdS8A6X4_O4_SbbqgNNYmPpJF7q5kuyBIIHM-jGdNdKBtpDKum_lKVcgGBeuK5uSa7S-Fg6YibehMVSXl5X_qw\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"o0av!IAAAAAjU3PgDi28Bz6EyFjuw-arsnBkHjXeBQ9Cj1-ns9Xze0QAAAAFdDM8-ZgKdlx1MY4-daD3IrIHirsLQfxLh5WQNuUJD8p0jh6avNb0_HEPGpVr--Nt3PWQG0O-n3Y-KJuHL15wyNouK48fRdqdyhSNjqxCPL25QF45HrQxZ5rvzS74uOxaS4YsNHCU-hq0wrMcmXpxrjBnBqXdKssRGFKdA4-DEreRPGdHQ4gRclrxlqFIpvSlJcdkEZXmqJ5HwbQHygFMCNCDrMQsr3OB2nYomWMXwSLh8cNzk9Mk33g81nopYhUKS7X7CVrX4-IiYGsVmCQ56\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoiU3l3NlNKZFRHUjE4dk5Ddk03Ykl5dyIsImF0X2hhc2giOiJMUWVnWTg1VGIyQXF0d1RBcG5iTTlRIiwibmJmIjoxNzEwMzM4NDc5LCJleHAiOjE3MTAzMzk2NzksImlhdCI6MTcxMDMzODQ3OSwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiMXMybzk4NWxJZjJGYTJEaTVaZzBtSiJ9.q8a8Gff3WvPFzITqTQzzPfaEEDIJtPr7lT3QtxIsyDWLZbzLxNwVi7s86BwNbw-pCCAUXUR913_LJf0xazaX8umLUEOJjyz2n7RdLCBXZ1Xmzcpt3-DH0jT77nXM5so49kjKbQO4Go9ncUYEOautnY1I_ZJFFCXAXcKyj4dkNO19tfZ1xBRglOl842sgHOABlBmpzejVEpUKKRvaFl7C8pg8WINPO9k9pfj4WFRbGNvJZAC0u-rAfGW89D6S6OlCs0S4l3soVM641taujFPKdAUiuOskRBAmBgX4p7S0LC3vLyt68AVzSmcysD-md5bH7R4G-mSZEmlagoQ_OmE7sg\",\n    \"scope\": \"openid email profile\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Hybrid flow - code token id_token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token, id_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testIdToken(id_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code id_token token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `access_token`, `id_token` in the **Response -> Body -> Visualize** tab\n    \n    - The `authorization_code`, `access_token`, `id_token` will be extracted from the callback url and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n        \n    - The `authorization_code` is expected to not be empty\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to openid email profile\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code id_token token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code id_token token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:30 GMT"
										},
										{
											"key": "Content-Length",
											"value": "1867"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=code%20id_token%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"f6rO66sZkAxGNGVVAFyAJTGmw_vuW9Lckg7_Ebw288fnqojmE2BX2sO-z0PlLrE4iuBXyMY7KGhJ100tziC0i0sbxtrP_q3v8m084U9OGUI2M6ev-m4USyDOjS-v7iej3Qusb9NUHK2E6qkuGtHvkQ2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code id_token token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Id token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Id token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{client_id}}\n            \n    - Id token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Id token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Id token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Id token has valid \"nonce\" claim\n        \n        - if the \"nonce\" claim value is equal to {{nonce}}\n            \n    - Id token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n            \n    - Refresh token grants new tokens\n        \n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2165"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:34 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6IjFzMm85ODVsSWYyRmEyRGk1WmcwbUoiLCJuYmYiOjE3MTAzMzg0OTQsImV4cCI6MTcxMDMzODYxNCwiaWF0IjoxNzEwMzM4NDkwLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.aYaGxcFVPqvtsqL5PtqV4dFT1c7Tu8qzvJrJDhauN0tIOpmKicKDPIJ4MnatbiyaZ6aQltBPFLzfB8GUJXxgaeRUVVinMjA3cK8q7cDEDv2GdJgXXVHPcPmHiUhUxCpb4jbi5RWc35hKzaPsX8HW2Ti1RFb7iOrlntbLDwaIL0pT3dYdyI5zpfx9U_UZaUk4X_iwKCNa-sq-CMD7ECWjcWo7JHpkj-q17ySETFSenN3vRUQmq_uWLW4i7NZvmlde6jlXB6geWDqav74w5PwT2YsbBfXZpz9aoQVJBRm_3euTXa0wPqHDgUdklWuJ424-R-vC_pynz9ZU9hVJAGpscg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"o0av!IAAAAENuQOsi2dOF3ACrmttmNyXk4V1tugXovVdn8X_7LsAX0QAAAAFEvS-4RF4BN9prvFouCF-yyLfBSmxhp3eA1LANEvW3BGarj9UERNMGakr_DeX6MIDVJ2auzsoytyvxSbUoe5N8Dphpej9__4mAOlwbwYiAjpz_rCC5MQtIis4cFEcVUI1gmBRCS_vVD9RO477l8O_ukFvpeYwWN3jNnaQayckyH_88OCkn7yK3fqWMYyD_ScBHidJrtEdMfRtfbMUwXAsUxWgwniBUl_GxNuDPjAV638hhX5MQ-z6iKBk4G4HV_AcRcKiGRKXZ0J7YjxEkn95o\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoiYXJNbk82Y3RFYkkxWWNacncxZ1JjUSIsImF0X2hhc2giOiJIa3haRENPUk43NVZoTnl3U1ppUUhRIiwibmJmIjoxNzEwMzM4NDk0LCJleHAiOjE3MTAzMzk2OTQsImlhdCI6MTcxMDMzODQ5NCwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiMXMybzk4NWxJZjJGYTJEaTVaZzBtSiJ9.TAVW3Yr6wZsWHmsZwO3ZnCdrTI9Dhau1S-bNxW8XmRpGuoexc6e3rFY5rGPVxsYK6g7KjnniGavg7yzxo3rNynKGQ50IF-fx3A5iJahXUrMeJCPgZRxJxtdRsoSX9Dn1ijD0x7w5wg1qiyDI6jZLIfzIS50MZV4gW4Gtiruf0hE2skhEx2F_Dh7exLnCgGacs72HoBIKNDdrWN37WH3tlx7gPdiD0C2Nc1w70d98xyAcJ1u2IWSYXPPc2lbjDiDHDlxMNbvpGr8RPKEBWl9dwNzOpWisdskMXVTyKFl2l5Hwo-Q_o1lC4siHr-9_PqWbsnHcmEt0PvApFAk0iHKELg\",\n    \"scope\": \"openid email profile\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				},
				{
					"name": "Hybrid flow - code token",
					"item": [
						{
							"name": "Authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200or302();\r",
											"\r",
											"pmutils(pm).postConfirmAuthorizeRequestIfNecessaryThenSetTokens('form', ({ authorization_code, access_token }) => {\r",
											"    pmutils(pm).testCallbacks.testAuthorizationCode(authorization_code);\r",
											"    pmutils(pm).testCallbacks.testAccessToken(access_token);\r",
											"    pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(access_token);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"authorize"
									],
									"query": [
										{
											"key": "scope",
											"value": "{{scope}}"
										},
										{
											"key": "response_type",
											"value": "code token"
										},
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}"
										},
										{
											"key": "state",
											"value": "{{state}}"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}"
										}
									]
								},
								"description": "_The consent screen will be automatically accepted. In a real use case, the user must click on the \"Accept\" button._\n\n- See the response `authorization_code`, `access_token` in the **Response -> Body -> Visualize** tab\n    \n    - The `authorization_code`, `access_token` will be extracted from the callback url and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200 because we're always getting the consent form back in the case of Hybrid Flow\n        \n    - The `authorization_code` is expected to not be empty\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to [https://cfs01/cfs/oauth/mytenant](https://cfs01/cfs/oauth/mytenant)\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to openid email profile\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
							},
							"response": [
								{
									"name": "Authorize",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/authorize?scope={{scope}}&response_type=code token&redirect_uri=https://oauth.pstmn.io/v1/callback&client_id={{client_id}}&state={{state}}&nonce={{nonce}}",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"authorize"
											],
											"query": [
												{
													"key": "scope",
													"value": "{{scope}}"
												},
												{
													"key": "response_type",
													"value": "code token"
												},
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}"
												},
												{
													"key": "state",
													"value": "{{state}}"
												},
												{
													"key": "nonce",
													"value": "{{nonce}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "html",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Type",
											"value": "text/html; charset=utf-8"
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcYXV0aG9yaXpl?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:44 GMT"
										},
										{
											"key": "Content-Length",
											"value": "1856"
										}
									],
									"cookie": [],
									"body": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en-US\">\n    <head>\n        <title>Cloud Federation Service - Authorize the application</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta name=\"robots\" content=\"noindex,nofollow\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/base.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Content/css/login.min.css\" />\n        <link rel=\"stylesheet\" href=\"/Css/Login/stormwind.css\" />\n    </head>\n    <body>\n        <div>\n            <div class=\"title\">\n                <img class=\"login-picture\" src=\"/Images/Index/stormwind.png\" alt=\"Stormwind\" />\n            </div>\n            <div data-cfs-page-name=\"oauth2-authorize\" class=\"guest-content\">\n                <p class=\"alert alert-warning\">\n                    <strong>You can use your account to sign in to other sites and services.</strong>\n        By signing here, you can use My Application without sharing your password.\n                </p>\n                <h3 class=\"dark\">Authorize My Application to use your account?</h3>\n                <p class=\"dark\">This application \n                    <span class=\"text-success\">will be able to</span>:\n                </p>\n                <ul class=\"dark\">\n                    <li>Get your email address.</li>\n                    <li>Get your basic profile information.</li>\n                </ul>\n                <p id=\"javascriptDisabled\" class=\"alert alert-danger\">\n                    <strong>Javascript appears to be disabled in your browser.</strong>\n        This page requires Javascript to be enabled to better protect your security.\n                </p>\n                <form action=\"/oauth/stormwind/authorize?scope=openid%20email%20profile&amp;response_type=code%20token&amp;redirect_uri=https://oauth.pstmn.io/v1/callback&amp;client_id=1s2o985lIf2Fa2Di5Zg0mJ&amp;state=abc&amp;nonce=xyz\" method=\"post\">\n                    <input name=\"__RequestVerificationToken\" type=\"hidden\" value=\"D1k0ALeZu4dmNos8boZoSDpp4m7SUjNUKWVwvY4VZLzMnKfQVpNNexwyNoGqch0XTnMVHfQsDTcUE4XARjZni0l2or-vHsxzJFyo8AgXTCF2xuK-5Eyef30oc4vCQDljXpZ-0aBaDS6NIuN_4jowSA2\" />\n                    <input id=\"IsApproved\" name=\"IsApproved\" type=\"hidden\" value=\"\" />\n                    <input id=\"client_id\" name=\"client_id\" type=\"hidden\" value=\"1s2o985lIf2Fa2Di5Zg0mJ\" />\n                    <input id=\"redirect_uri\" name=\"redirect_uri\" type=\"hidden\" value=\"https://oauth.pstmn.io/v1/callback\" />\n                    <input id=\"state\" name=\"state\" type=\"hidden\" value=\"abc\" />\n                    <input id=\"scope\" name=\"scope\" type=\"hidden\" value=\"openid email profile\" />\n                    <input id=\"response_type\" name=\"response_type\" type=\"hidden\" value=\"code token\" />\n                    <input id=\"nonce\" name=\"nonce\" type=\"hidden\" value=\"xyz\" />\n                    <div id=\"responseButtonsDiv\" class=\"clearfix\" style=\"margin-top: 15px; margin-bottom: 15px;\">\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = true; return true;\">\n                    Accept\n                </button>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <button type=\"submit\" class=\"btn btn-warning btn-lg btn-block no-border\" onclick=\"document.getElementsByName('IsApproved')[0].value = false; return true;\">\n                    Cancel\n                </button>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\">\n                    <p class=\"alert alert-info alert-footer\">You can revoke access to any application at any time from your Security page.</p>\n                </div>\n            </div>\n        </div>\n        <script src=\"/Scripts/base.min.js\"></script>\n        <script language=\"javascript\" type=\"text/javascript\">\n        document.getElementById('responseButtonsDiv').style.display = 'block';\n        document.getElementById('javascriptDisabled').style.display = 'none';\n\n        if (document.location !== window.top.location) {\n            window.top.location = document.location;\n        }\n    </script>\n    </body>\n</html>"
								}
							]
						},
						{
							"name": "Request for tokens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pmutils(pm).testCallbacks.testResponseStatus200();\r",
											"\r",
											"const responseData = JSON.parse(responseBody);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testIdToken(responseData.id_token);\r",
											"\r",
											"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
											"pm.collectionVariables.set(\"id_token\", responseData.id_token);\r",
											"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
											"\r",
											"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
											"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "redirect_uri",
											"value": "https://oauth.pstmn.io/v1/callback",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorization_code}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{id_token}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								},
								"description": "- See the response `access_token`, `id_token`, `refresh_token`, etc. in the **Response -> Body -> Pretty** tab\n    - The `acess_token`, `id_token`, `refresh_token` will be extracted from the response and set in the collection variables\n- See the test results in the **Response -> Test Results** tab\n    - The response status code is expected to be 200\n    - Access token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Access token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Access token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Access token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Access token has valid \"scope\" claim\n        - if the \"scope\" claim value is equal to {{scope}}\n    - Access token is valid\n        - if all the above tests are passing\n    - Id token has valid \"iss\" claim\n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n    - Id token has valid \"aud\" claim\n        - if the \"aud\" claim value is equal to {{client_id}}\n    - Id token has valid \"iat\" claim\n        - if the \"iat\" claim value is before `Date.now()`\n    - Id token has valid \"exp\" claim\n        - if the \"exp\" claim value is after `Date.now()`\n    - Id token has valid \"nbf\" claim\n        - if the \"nbf\" claim value is before the \"exp\" claim value\n    - Id token has valid \"nonce\" claim\n        - if the \"nonce\" claim value is equal to {{nonce}}\n    - Id token is valid\n        - if all the above tests are passing\n    - Access token grants access to resources\n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server\n    - Refresh token grants new tokens\n        - automatically send the \"Refresh token\" request to make sure that the `refresh_token` can be used to retrieve new tokens"
							},
							"response": [
								{
									"name": "Request for tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "redirect_uri",
													"value": "https://oauth.pstmn.io/v1/callback",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorization_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{id_token}}",
													"type": "text"
												},
												{
													"key": "client_secret",
													"value": "{{client_secret}}",
													"type": "text"
												},
												{
													"key": "state",
													"value": "{{state}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
											"host": [
												"{{CFS Master URL}}"
											],
											"path": [
												"oauth",
												"{{Tenant Name}}",
												"token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Content-Length",
											"value": "2165"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization"
										},
										{
											"key": "X-SourceFiles",
											"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Wed, 13 Mar 2024 14:01:50 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6IjFzMm85ODVsSWYyRmEyRGk1WmcwbUoiLCJuYmYiOjE3MTAzMzg1MTAsImV4cCI6MTcxMDMzODYzMCwiaWF0IjoxNzEwMzM4NTA0LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.JkKbhHTu_6Sk0mTYfXP9pEDMQi9BNrXg-lVJLPWtgdEEHzSsPSDv9V88EvpbupcPnzV63XzEsXB8B--6ptFaLeX_Hguopt1ZcN-1XfcZttEWjzg7w5hixhJ6slwFQEkA5VRZc1h25jRbxfQhi4WQ3XgrJCJv7NBzshEROpdcq5q_jEcSF3dwRfAjWrma0koE5vKoykqSdrBDyOTrQCRTLIR6Rk7DJfhUMQHPlQ1_2rB5NiKOffqt1DR5MOlxb1WmAgvfTChJ87880bHceJFa1JCdvidDsi7JhiiKi6HOK7fsc5h3Hd6hKxlF2BiGk3wdTjrYrmW2ulVqKcaXjzwoZA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"o0av!IAAAAETteJxCgtsmH9e11c7qAYNFDYhjcHbvuGnm6wzRhwkJ0QAAAAGkDt6JVKslnmbssiVxr7E0eK6EJn_HqyYsoPw5ysC91a2lQ1PgPcgoqYm2abJMguPgGXZC4m2vV46eIwD7_ab0sMaMVt9BISz__dwzj0Lso_wtnkLG_QIc9ptqVaIgr-swHxGr9pFWV6NWSrAymEIKCauZqj4bEcMIqXA2Al1BhfR2SrUR5D6tG1Esdpv8RHEPzQNtQX7FPF4MRbvM5JIFRz6km56ewbepJVqYjpKqkLnnvK-b6aZRwVIFmAmoLeuuI7yQ_d-8eNfDaYIkx3sj\",\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJub25jZSI6Inh5eiIsIm5hbWUiOiJWYXJpYW4gV3J5bm4iLCJmYW1pbHlfbmFtZSI6IldyeW5uIiwiZ2l2ZW5fbmFtZSI6IlZhcmlhbiIsImVtYWlsIjoidmFyaWFuLndyeW5uQHN0b3Jtd2luZC56ZXIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiY19oYXNoIjoiNzhaYmM0elFmNU5fZDNZWHhtZDc4USIsImF0X2hhc2giOiJaSHFTa196Ml9BOWNoVjFuanBDcG1nIiwibmJmIjoxNzEwMzM4NTEwLCJleHAiOjE3MTAzMzk3MTAsImlhdCI6MTcxMDMzODUxMCwiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiMXMybzk4NWxJZjJGYTJEaTVaZzBtSiJ9.Dv7un75fk7Nff2sOgVW-LSm3E4Fqxt86UBVcUrvrxcVGyHYaAeyDlQjauPBpUXRi1TRSGTourW4HUYpxezBCeXWKqBpygU6AAflpETdshxhV3jP_Mr8Lu1l-Us4fy7LLRIigufFlMtx_bx11E21zFc9iftUrfLcOplleb_P6dintVmfNTJ-ENEGOpXQUNxGPcnug1h79u5xtLKCJ-biW1IfsNYGp-dPf2nFvV2TO0UiIE_48LJg0Z198gw8y-sr8KOCnptRa3CsoJvuVUYr4oBAmP2WWdWdXixaw8vv5dJmrqKZMbEbvqKn5vMEgTzA82JYOkQcB1Lo3GfTcADgDrA\",\n    \"scope\": \"openid email profile\"\n}"
								}
							]
						}
					],
					"description": "- Run the \"GET Authorize\" request\n    \n- Run the \"POST Request for tokens\" request"
				}
			],
			"description": "**N.B.:** The \"Automatically follow redirects\" setting must be **disabled** in Postman in order to run the requests in this folder!\n\n<img src=\"https://content.pstmn.io/e920769a-172e-49da-a73d-9b6a531ce945/aW1hZ2UucG5n\" width=\"846\" height=\"840\">"
		},
		{
			"name": "Client credentials",
			"item": [
				{
					"name": "Request for access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pmutils(pm).testCallbacks.testResponseStatus200();",
									"",
									"const responseData = pm.response.json();",
									"",
									"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);",
									"",
									"pm.collectionVariables.set(\"access_token\", responseData.access_token);",
									"",
									"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{scope}}",
									"type": "text"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								},
								{
									"key": "nonce",
									"value": "{{nonce}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						},
						"description": "- See the response `access_token`, etc. in the **Response -> Body -> Pretty** tab\n    \n    - The `acess_token`, will be extracted from the response and set in the collection variables\n        \n- See the test results in the **Response -> Test Results** tab\n    \n    - The response status code is expected to be 200\n        \n    - Access token has valid \"iss\" claim\n        \n        - if the \"iss\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"aud\" claim\n        \n        - if the \"aud\" claim value is equal to {{CFS Master URL}}/oauth/{{Tenant Name}}\n            \n    - Access token has valid \"iat\" claim\n        \n        - if the \"iat\" claim value is before `Date.now()`\n            \n    - Access token has valid \"exp\" claim\n        \n        - if the \"exp\" claim value is after `Date.now()`\n            \n    - Access token has valid \"nbf\" claim\n        \n        - if the \"nbf\" claim value is before the \"exp\" claim value\n            \n    - Access token has valid \"scope\" claim\n        \n        - if the \"scope\" claim value is equal to {{scope}}\n            \n    - Access token is valid\n        \n        - if all the above tests are passing\n            \n    - Access token grants access to resources\n        \n        - automatically send the \"UserInfo endpoint\" request to make sure that the `acess_token` is accepted by the server"
					},
					"response": [
						{
							"name": "Request for access token",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{scope}}",
											"type": "text"
										},
										{
											"key": "state",
											"value": "{{state}}",
											"type": "text"
										},
										{
											"key": "nonce",
											"value": "{{nonce}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
									"host": [
										"{{CFS Master URL}}"
									],
									"path": [
										"oauth",
										"{{Tenant Name}}",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Length",
									"value": "888"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "authorization"
								},
								{
									"key": "X-SourceFiles",
									"value": "=?UTF-8?B?WDpcc291cmNlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Wed, 13 Mar 2024 14:02:23 GMT"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjI0ZjAyYWNjLWM2NjItNDliYS04NmMxLWE4MmUxMjY5NGU3ZSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInRva2VuX3R5cGUiOiJiZWFyZXIiLCJjbGllbnRfaWQiOiIxczJvOTg1bElmMkZhMkRpNVpnMG1KIiwibmJmIjoxNzEwMzM4NTQzLCJleHAiOjE3MTAzMzg2NjMsImlhdCI6MTcxMDMzODU0MywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIiwiYXVkIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NDQzMDMvb2F1dGgvc3Rvcm13aW5kIn0.EsI-e_GP1ntXoOzk9nsIJUEjY3GtHJ8niZSUdCPQBYQp7JyncPysE27YdOIrf8y_9JWHLnSVhCToA6BnsxmoZJV1NLiwQ-HZHhi9jMC022RsPGm0pao41R6dYcKZA26xr2tnYDmutYXKMAgq5xWiapqYBY_2YkgwLp3ZNh618wQt2YOgdkXOlKSYG-tfu-kfHhEfJ5BD9yrT85jc0ZZfZFsjKJGlSZubs5KYiDifF5RSumDQPgfFYUJ6AsVrO-sYGOqE02VN6Qfwzmkq-PTC0zPnwqgUtRfTh41mbZ0H0kCg0-jq0WhU_jMREaVqJ9SJmc2RMI-z-ZdidLBXk7t1dA\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"scope\": \"openid email profile\"\n}"
						}
					]
				}
			],
			"description": "Run the \"Request for access token\" request"
		},
		{
			"name": "Get OIDC metadata",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						".well-known",
						"openid-configuration"
					]
				}
			},
			"response": [
				{
					"name": "Get OIDC metadata",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/openid-configuration",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								".well-known",
								"openid-configuration"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-SourceFiles",
							"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcLndlbGwta25vd25cb3BlbmlkLWNvbmZpZ3VyYXRpb24=?="
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 14 Feb 2024 14:59:58 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1539"
						}
					],
					"cookie": [],
					"body": "{\n    \"issuer\": \"https://localhost:44303/oauth/stormwind\",\n    \"authorization_endpoint\": \"https://localhost:44303/oauth/stormwind/authorize\",\n    \"token_endpoint\": \"https://localhost:44303/oauth/stormwind/token\",\n    \"token_endpoint_auth_methods_supported\": [\n        \"client_secret_post\",\n        \"client_secret_basic\"\n    ],\n    \"userinfo_endpoint\": \"https://localhost:44303/oauth/stormwind/userinfo\",\n    \"response_types_supported\": [\n        \"code\",\n        \"token\",\n        \"id_token\",\n        \"id_token token\",\n        \"code id_token\",\n        \"code token\",\n        \"code id_token token\"\n    ],\n    \"response_modes_supported\": [\n        \"query\",\n        \"fragment\",\n        \"form_post\"\n    ],\n    \"subject_types_supported\": [\n        \"public\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"RS256\"\n    ],\n    \"jwks_uri\": \"https://localhost:44303/oauth/stormwind/.well-known/keys\",\n    \"scopes_supported\": [\n        \"openid\",\n        \"profile\",\n        \"email\",\n        \"address\",\n        \"phone\",\n        \"groups\"\n    ],\n    \"claims_supported\": [\n        \"sub\",\n        \"name\",\n        \"given_name\",\n        \"family_name\",\n        \"middle_name\",\n        \"nickname\",\n        \"preferred_username\",\n        \"profile\",\n        \"picture\",\n        \"website\",\n        \"gender\",\n        \"birthdate\",\n        \"zoneinfo\",\n        \"locale\",\n        \"updated_at\",\n        \"address\",\n        \"email\",\n        \"email_verified\",\n        \"phone_number\",\n        \"phone_number_verified\",\n        \"groups\"\n    ],\n    \"end_session_endpoint\": \"https://localhost:44303/oauth/stormwind/endsession\",\n    \"check_session_iframe\": \"https://localhost:44303/oauth/stormwind/checksession\"\n}"
				}
			]
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pmutils(pm).testCallbacks.testResponseStatus200();\r",
							"\r",
							"const responseData = JSON.parse(responseBody);\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessToken(responseData.access_token);\r",
							"\r",
							"pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
							"pm.collectionVariables.set(\"refresh_token\", responseData.refresh_token);\r",
							"\r",
							"pmutils(pm).testCallbacks.testAccessTokenGrantsAccessToResources(responseData.access_token);\r",
							"pmutils(pm).testCallbacks.testRefreshTokenRefreshesTokens(responseData.refresh_token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "refresh_token",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						},
						{
							"key": "refresh_token",
							"value": "{{refresh_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						"token"
					]
				}
			},
			"response": [
				{
					"name": "Refresh token",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{client_id}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{client_secret}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/token",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"token"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "no-cache, no-store, max-age=0, must-revalidate"
						},
						{
							"key": "Pragma",
							"value": "no-cache"
						},
						{
							"key": "Content-Length",
							"value": "1231"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-SourceFiles",
							"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdG9rZW4=?="
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 14 Feb 2024 15:00:30 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjE0MTgxZjUxLTE3NTgtNDAwNS05N2E5LWUwNmQzNzI1NGM4NSIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ2YXJpYW4ud3J5bm4iLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwidG9rZW5fdHlwZSI6ImJlYXJlciIsImNsaWVudF9pZCI6InN0TEp3VzliM0w1QlBhaUZGVng5Y0IiLCJuYmYiOjE3MDc5MjI4MzAsImV4cCI6MTcwNzkyMjk1MCwiaWF0IjoxNzA3OTIyMjY2LCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQiLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMwMy9vYXV0aC9zdG9ybXdpbmQifQ.cIqg_nRM1QWu86TGs-hUZ7TeHGlfJ9VOQWgRHi3Cy11mylA2uvzSS8OKRPnl5c08e3Cd5zSKNIP4BnfI3Nt0ysHtC60glifJYyJ_dTnzN-eDYtPFK7KHqE-TLX_cDeyWwYApfTS3eplObpAfB2l3qkhE1ibiCbWoEZaedz8f75NXW0deBTjKCCtBrVJVhjRr0tKCn9TdI7wIf3S_IM9TQ_mo7T0hBFBmFkuX-DnNQM3G8VJZHKWnelWLpDXrGSYkZFI73kjqLGEkJYKVSrC0eYTjiyIRbrxgtmWLjMumQUCuPGvJnz-DrL6E_nVStmf8TJAT0IiM9DAd6ChmJ6g8gg\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 120,\n    \"refresh_token\": \"92ld!IAAAABcgJJlbt294Zz2KCV4EvjDQlFiYTKlq4gq_LpNG50eQ0QAAAAFElnWzxZ41fPS-9J8k0ZFK23P9nRWy_kDMbjhpZ7X82meYn3jNhVOnM2RAQCMYJ1zs8yaHYUwasVJvb5Tng4gEKGfxM7gf0DcxFoeIU_l6vRDYtyYo_qTIidotd6aQ3U8QWYy3D0hLyqfgNGZxtZLZbhZ9m3lu51J_etlxJ_EHXZeF9H9i0Lhhs5QeqQnE0qMOibUBSG3xzVzhQxLgXYtTDVk4NedZkQX6U-tBoSmyH5KJk12gLe18DarpSyCxEF4OoLhEfIJI6tGqKDI_DT09\",\n    \"scope\": \"openid email profile\"\n}"
				}
			]
		},
		{
			"name": "UserInfo endpoint",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						"userinfo"
					]
				}
			},
			"response": [
				{
					"name": "UserInfo endpoint",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/userinfo",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								"userinfo"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-SourceFiles",
							"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcdXNlcmluZm8=?="
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 14 Feb 2024 15:01:16 GMT"
						},
						{
							"key": "Content-Length",
							"value": "232"
						}
					],
					"cookie": [],
					"body": "{\n    \"iss\": \"https://localhost:44303/oauth/stormwind\",\n    \"sub\": \"varian.wrynn\",\n    \"name\": \"Varian Wrynn\",\n    \"family_name\": \"Wrynn\",\n    \"given_name\": \"Varian\",\n    \"email\": \"varian.wrynn@stormwind.zer\",\n    \"email_verified\": true\n}"
				}
			]
		},
		{
			"name": "Get JWT Keys",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						".well-known",
						"keys"
					]
				}
			},
			"response": [
				{
					"name": "Get JWT Keys",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/.well-known/keys",
							"host": [
								"{{CFS Master URL}}"
							],
							"path": [
								"oauth",
								"{{Tenant Name}}",
								".well-known",
								"keys"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/10.0"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "authorization"
						},
						{
							"key": "X-SourceFiles",
							"value": "=?UTF-8?B?WDpcc291cmNlXGVuc2VtYmxlXHJhZGlhbnRsb2dpY1xjZnNcc3JjXENGU1xSTEkuQ0ZTLldlYlxvYXV0aFxzdG9ybXdpbmRcLndlbGwta25vd25ca2V5cw==?="
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 14 Feb 2024 15:01:48 GMT"
						},
						{
							"key": "Content-Length",
							"value": "1349"
						}
					],
					"cookie": [],
					"body": "{\n    \"keys\": [\n        {\n            \"kid\": \"14181f51-1758-4005-97a9-e06d37254c85\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"yY5LOwTeX_7cdaVxuhlkNCtONmziMWi8sZaOzgQ7F2GZjjJaGGN-3N0FuCOKY6DYGW7Rz0vfi7mza546PRz3jQnztAZImjW3c5SAD2HBKYKI5z13i8f8J0YEFUIu9ud0htEx6AW8nKrxsSVQK87Rm5zs6KI7_qbrWvhZAwvlCb3LR3NwrJ-CC9NfRaKdaJhDJeFT3aSfis_oLamFUmL_EekaPUIAmK_9HFjKag1yTtokVBC9T7k_Nd4IXTHDNoiRYxpPHeLNZ2DuFCZsZuOowOnljsuTkCpKTak8QTiOow-MDJ-v9Te0Lxpyq4B7YQ8WrzFl-fOdUUzK6OO0rTh5BQ\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"953c2108-a75d-4dbf-8435-83995e2dfe2a\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"15TaEIOhgl0JiEbmNwYOE_csXRQq212NEz5_vaQpo5Me8sLxYvVO18e7EkQ-N-5XnpcaT4_hMLVh8yQHsNJ0vgI7ndF5lcofj0PdSGVhHUK2UUtg4VhmR8DdylOu-FvnoqUT25P0LgkfONxnc9X-uWZ7OjnT3pBDNCdsrqiW_2mbmpvkSnxOxpvjj_eEUuLFUM268SjGLdFMBE-bCAYxI6lbLC9XBaKjkd74KNTPtt-V-t5uYqgSxruSCZjsmz8ri5dxv2e3dL9x9Yf1GlZcq5J-oi9mm8tDg6oCowplSjLqda84T4SqxE2RpFk8w9GLOeo7HyQd6E6_57jwu-s3WQ\",\n            \"alg\": \"RSA256\"\n        },\n        {\n            \"kid\": \"d517dc2a-609b-46d4-8e15-1f8fdec270f9\",\n            \"kty\": \"RSA\",\n            \"use\": \"sig\",\n            \"e\": \"AQAB\",\n            \"n\": \"yFX7q9J2HLBI27-KiiyFBds-yisDvUpgFLNURszJzFcOGoWA4VXAdgKnxzUcWI5Bp87kVJTnLvH0etXEREBeec74PCs_Hu37esss5U2eVnDkCr2VaNxWCGFrPINVlxvPIw82ibggsQS9YzLAgvLkiZikg1ntmqsyV4F4wbdRdgzc6LU1yBfgjPbnU7a6w3mLF5Pult-pXZoXckucG3L5ZeAprdWHPXK6KupYAaOfhdqM-ZqJgT-ha9RAPPIkeaehw2TKnErmvJGpTdBEa5usxPN1XZNiNOSv4Nt4SI04BTV39eJ1tUh5TuelrEKtQq6Kr1lYWvtfVG_znxlfberBjQ\",\n            \"alg\": \"RSA256\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "EndSession #pending_bug_CFS-35",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CFS Master URL}}/oauth/{{Tenant Name}}/endsession?post_logout_redirect_uri=https://oauth.pstmn.io/v1/callback&state={{state}}&id_token_hint={{id_token}}",
					"host": [
						"{{CFS Master URL}}"
					],
					"path": [
						"oauth",
						"{{Tenant Name}}",
						"endsession"
					],
					"query": [
						{
							"key": "post_logout_redirect_uri",
							"value": "https://oauth.pstmn.io/v1/callback"
						},
						{
							"key": "state",
							"value": "{{state}}"
						},
						{
							"key": "id_token_hint",
							"value": "{{id_token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pmutils =",
					"    /**",
					"     * @param {Postman} pm",
					"     */",
					"    function (pm) {",
					"        return {",
					"            _oAuthVariableNameToCollectionVariableNameMap: Object.freeze({",
					"                access_token: \"access_token\",",
					"                code: \"authorization_code\",",
					"                id_token: \"id_token\",",
					"                refresh_token: \"refresh_token\",",
					"            }),",
					"",
					"            testCallbacks: Object.freeze({",
					"                testAuthorizationCode: (authorization_code) => {",
					"                    pm.test(\"Authorization code is valid\", () => {",
					"                        pm.expect(authorization_code).to.not.be.null;",
					"                        pm.expect(authorization_code).to.not.be.undefined;",
					"                    });",
					"                },",
					"",
					"                testAccessToken: (access_token) => {",
					"                    pm.test(\"Acess token is valid\", () => {",
					"                        pm.expect(access_token).to.not.be.null;",
					"                        pm.expect(access_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = access_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Access token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.collectionVariables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.collectionVariables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const aud = payload.aud;",
					"                            const audUrl = URL.parse(aud);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.collectionVariables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.collectionVariables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(audUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Access token has valid \\\"scope\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"scope\", pm.variables.get('scope'), null);",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testAccessTokenGrantsAccessToResources: (access_token) => {",
					"                    pm.test(\"Access token grants access to resources\", () => {",
					"                        pm.sendRequest(",
					"                            {",
					"                                url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/userinfo',",
					"                                method: 'GET',",
					"                                header: {",
					"                                    Authorization: 'Bearer ' + access_token",
					"                                }",
					"                            },",
					"                            (err, response) => {",
					"                                pm.expect(err).to.be.null;",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"                            }",
					"                        );",
					"                    });",
					"                },",
					"",
					"                testIdToken: (id_token) => {",
					"                    pm.test(\"Id token is valid\", () => {",
					"                        pm.expect(id_token).to.not.be.null;",
					"                        pm.expect(id_token).to.not.be.undefined;",
					"",
					"                        const atob = require('atob');",
					"",
					"                        const [jwtHeader, jwtPayload, jwtSignature] = id_token.split('.');",
					"                        const [header, payload] = [jwtHeader, jwtPayload].map(atob).map(JSON.parse);",
					"",
					"                        pm.test(\"Id token has valid \\\"iss\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iss\");",
					"",
					"                            const URL = require('url');",
					"",
					"                            const iss = payload.iss;",
					"                            const issUrl = URL.parse(iss);",
					"",
					"                            const cfsUrl = URL.parse(",
					"                                pm.collectionVariables.get('CFS Master URL') +",
					"                                \"/oauth/\" +",
					"                                pm.collectionVariables.get('Tenant Name')",
					"                            );",
					"",
					"                            pm.expect(issUrl.toString()).to.be.equal(cfsUrl.toString());",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"aud\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"aud\");",
					"",
					"                            const aud = payload.aud;",
					"",
					"                            pm.expect(aud).to.be.equal(pm.collectionVariables.get('client_id'));",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"iat\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"iat\");",
					"",
					"                            const iat = payload.iat;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(iat).to.be.lessThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"exp\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"exp\");",
					"",
					"                            const exp = payload.exp;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(exp).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nbf\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nbf\");",
					"",
					"                            const nbf = payload.nbf;",
					"                            const now = Date.now() / 1000;",
					"",
					"                            pm.expect(nbf).to.be.greaterThan(now);",
					"                        });",
					"",
					"                        pm.test(\"Id token has valid \\\"nonce\\\" claim\", () => {",
					"                            pm.expect(payload).to.have.property(\"nonce\", pm.variables.get(\"nonce\"), null);",
					"                        });",
					"                    });",
					"                },",
					"",
					"                testRefreshTokenRefreshesTokens: (refresh_token) => {",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: pm.variables.get('CFS Master URL') + '/oauth/' + pm.variables.get('Tenant Name') + '/token',",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: [{",
					"                                    key: 'client_id',",
					"                                    value: pm.variables.get('client_id'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'grant_type',",
					"                                    value: 'refresh_token',",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'client_secret',",
					"                                    value: pm.variables.get('client_secret'),",
					"                                    disabled: false,",
					"                                },",
					"                                {",
					"                                    key: 'refresh_token',",
					"                                    value: refresh_token,",
					"                                    disabled: false,",
					"                                }]",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            pm.test(\"Refresh token grants new tokens\", () => {",
					"                                pm.expect(err).to.be.null;",
					"",
					"                                if (err) {",
					"                                    console.error(err);",
					"                                    return;",
					"                                }",
					"",
					"                                pm.expect(response.code).to.be.equal(200);",
					"",
					"                                const responseBody = response.json();",
					"                                pm.expect(responseBody).to.have.property('access_token');",
					"                                pm.expect(responseBody).to.have.property('refresh_token');",
					"                            });",
					"                        }",
					"                    );",
					"                },",
					"",
					"                testResponseStatus200: () => {",
					"                    pm.test(\"Response has status code 200\", () => {",
					"                        pm.expect(pm.response.code).to.be.equal(200);",
					"                    });",
					"                },",
					"",
					"                testResponseStatus200or302: () => {",
					"                    pm.test(\"Response has status code 200 or 302\", () => {",
					"                        pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
					"                    });",
					"                },",
					"",
					"                /**",
					"                 * @param {number} statusCode",
					"                 */",
					"                testResponseStatus: (statusCode) => {",
					"                    pm.test(`Response has status code ${statusCode}`, () => {",
					"                        pm.expect(pm.response.code).to.be.equal(statusCode);",
					"                    });",
					"                },",
					"            }),",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractPostAuthorizeRequestBodyFromResponse(response) {",
					"                const cheerio = require('cheerio');",
					"",
					"                const $ = cheerio.load(response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"                const isLoginRequired = targetUrl.endsWith('/authorizelogin');",
					"",
					"                const requestBody = {",
					"                    ...{",
					"                        __RequestVerificationToken: $form.find('input[name=\"__RequestVerificationToken\"]').attr('value'),",
					"                        IsApproved: true,",
					"                        client_id: $form.find('input[name=\"client_id\"]').attr('value'),",
					"                        redirect_uri: $form.find('input[name=\"redirect_uri\"]').attr('value'),",
					"                        state: $form.find('input[name=\"state\"]').attr('value'),",
					"                        scope: $form.find('input[name=\"scope\"]').attr('value'),",
					"                        response_type: $form.find('input[name=\"response_type\"]').attr('value'),",
					"                        response_mode: $form.find('input[name=\"response_mode\"]').attr('value'),",
					"                        nonce: $form.find('input[name=\"nonce\"]').attr('value'),",
					"                        code_challenge: $form.find('input[name=\"code_challenge\"]').attr('value'),",
					"                        code_challenge_method: $form.find('input[name=\"code_challenge_method\"]').attr('value'),",
					"                    },",
					"                    ...(isLoginRequired ? {",
					"                        Username: pm.variables.get('username'),",
					"                        Password: pm.variables.get('password'),",
					"                    } : {})",
					"                };",
					"",
					"                return requestBody;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             */",
					"            extractTokenVariablesFromResponse(response, urlQueryExtractionMode) {",
					"                switch (urlQueryExtractionMode) {",
					"                    case 'form':",
					"                        return this.extractTokenVariablesFromResponseBodyForm(response);",
					"                    case 'hash':",
					"                        return this.extractTokenVariablesFromResponseLocationHash(response);",
					"                    default:",
					"                    case 'query':",
					"                        return this.extractTokenVariablesFromResponseLocationQuery(response);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseBodyForm(response) {",
					"                const cheerio = require('cheerio');",
					"                const lodash = require('lodash');",
					"",
					"                const $ = cheerio.load(response.text());",
					"",
					"                const variablesMap = lodash(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .chain()",
					"                    .map((collectionVariableName, oAuthVariableName) => ({",
					"                        [collectionVariableName]: $(`input[name=\"${oAuthVariableName}\"]`).attr('value')",
					"                    }))",
					"                    .reduce(lodash.merge, {})",
					"                    .pickBy(value => !!value)",
					"                    .value()",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationHash(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.hash.split('#')[1];",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {require('postman-collection').Response} response",
					"             */",
					"            extractTokenVariablesFromResponseLocationQuery(response) {",
					"                const URL = require('url');",
					"",
					"                const responseLocation = response.headers.get('Location');",
					"                const url = URL.parse(responseLocation);",
					"                const queryStringValue = url.query;",
					"",
					"                return this.extractTokenVariablesFromQueryString(queryStringValue);",
					"            },",
					"",
					"            /**",
					"             * @param {string} queryStringValue",
					"             */",
					"            extractTokenVariablesFromQueryString(queryStringValue) {",
					"                const qs = require('querystring');",
					"",
					"                const queryString = qs.parse(queryStringValue);",
					"                const variablesMap = Object.entries(this._oAuthVariableNameToCollectionVariableNameMap)",
					"                    .filter(([oAuthVariableName]) => !!queryString[oAuthVariableName])",
					"                    .map(([oAuthVariableName, collectionVariableName]) => ({ [collectionVariableName]: queryString[oAuthVariableName] }))",
					"                    .reduce((x, y) => ({ ...x, ...y }), {});",
					"",
					"                return variablesMap;",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(variablesMap: object) => void} callback",
					"             */",
					"            postConfirmAuthorizeRequestIfNecessaryThenSetTokens(urlQueryExtractionMode = 'query', callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const locationHeaderValue = pm.response.headers.get('Location');",
					"                if (!locationHeaderValue) {",
					"                    const $ = cheerio.load(pm.response.text());",
					"                    const $form = $(\"form\");",
					"",
					"                    const targetUrl = $form.attr('action');",
					"",
					"                    const requestBody = this.extractPostAuthorizeRequestBodyFromResponse(pm.response);",
					"",
					"                    pm.sendRequest(",
					"                        {",
					"                            url: pm.variables.get('CFS Master URL') + targetUrl,",
					"                            method: 'POST',",
					"                            body: {",
					"                                mode: 'urlencoded',",
					"                                urlencoded: Object",
					"                                    .entries(requestBody)",
					"                                    .map(([key, value]) => ({",
					"                                        key: key,",
					"                                        value: value,",
					"                                        disabled: false,",
					"                                    }))",
					"                            }",
					"                        },",
					"                        (err, response) => {",
					"                            if (err) {",
					"                                console.error(err);",
					"                                return;",
					"                            }",
					"",
					"                            const variablesMap = this.extractTokenVariablesFromResponse(response, urlQueryExtractionMode);",
					"                            this.setCollectionVariables(variablesMap);",
					"                            this.setVisualizer(variablesMap);",
					"",
					"                            callback(variablesMap);",
					"                        }",
					"                    );",
					"                } else {",
					"                    const variablesMap = this.extractTokenVariablesFromResponse(pm.response, urlQueryExtractionMode);",
					"                    this.setCollectionVariables(variablesMap);",
					"                    this.setVisualizer(variablesMap);",
					"",
					"                    callback(variablesMap);",
					"                }",
					"            },",
					"",
					"            /**",
					"             * @param {'form' | 'hash' | 'query'} urlQueryExtractionMode",
					"             * @param {(response: require('postman-collection').Response) => void} callback",
					"             */",
					"            postDenyAuthorizeRequest(callback = null) {",
					"                if (!callback) {",
					"                    callback = () => { };",
					"                }",
					"",
					"                const $ = cheerio.load(pm.response.text());",
					"                const $form = $(\"form\");",
					"",
					"                const targetUrl = $form.attr('action');",
					"",
					"                const requestBody =",
					"                {",
					"                    ...this.extractPostAuthorizeRequestBodyFromResponse(pm.response),",
					"                    IsApproved: false,",
					"                };",
					"",
					"                pm.sendRequest(",
					"                    {",
					"                        url: pm.variables.get('CFS Master URL') + targetUrl,",
					"                        method: 'POST',",
					"                        body: {",
					"                            mode: 'urlencoded',",
					"                            urlencoded: Object",
					"                                .entries(requestBody)",
					"                                .map(([key, value]) => ({",
					"                                    key: key,",
					"                                    value: value,",
					"                                    disabled: false,",
					"                                }))",
					"                        }",
					"                    },",
					"                    (err, response) => {",
					"                        if (err) {",
					"                            console.error(err);",
					"                            return;",
					"                        }",
					"",
					"                        callback(response);",
					"                    }",
					"                );",
					"            },",
					"",
					"            /**",
					"             * @param {object} variablesMap",
					"             */",
					"            setCollectionVariables(variablesMap) {",
					"                Object.entries(variablesMap)",
					"                    .forEach(([collectionVariableName, value]) => pm.collectionVariables.set(collectionVariableName, value));",
					"            },",
					"",
					"            /**",
					"             * @param {object} data",
					"             */",
					"            setVisualizer(data) {",
					"                console.log(data);",
					"                const tableTemplate = `",
					"                    <div style=\"overflow-wrap: break-word;\">",
					"                        ${Object.keys(data).map(key => `<div class=\"row\" style=\"margin-bottom: 1rem;\"><div class=\"two columns\">${key}</div><div class=\"ten columns\">{{${key}}}</div></div>`).reduce((x, y) => x + y)}",
					"                    </div>",
					"                    `.trim();",
					"                pm.visualizer.set(tableTemplate, data);",
					"            },",
					"        };",
					"    }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CFS Master URL",
			"value": "https://cfs01.example.com/cfs",
			"type": "string"
		},
		{
			"key": "Tenant Name",
			"value": "mytenant",
			"type": "string"
		},
		{
			"key": "username",
			"value": "john.doe@example.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "MyPassword123!",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "stLJwW9b3L5BPaiFFVx9cB",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "jqvQwFVQgK92xRg4D1DryiiO7F3X5Hl6UeYZE4fZUQ95",
			"type": "string"
		},
		{
			"key": "scope",
			"value": "openid email profile",
			"type": "string"
		},
		{
			"key": "state",
			"value": "abc",
			"type": "string"
		},
		{
			"key": "nonce",
			"value": "xyz",
			"type": "string"
		},
		{
			"key": "redirect_uri",
			"value": "https://oauth.pstmn.io/v1/callback",
			"type": "string"
		},
		{
			"key": "code_challenge",
			"value": "rrsv_GL5iipUGp6yR5w5ra77fdggOxJ6htH9E217PeI",
			"type": "string"
		},
		{
			"key": "code_verifier",
			"value": "MR~lBQbZeIHsG3RnZuvgWmrAr8y1Ia~muw2zBrJdPlz5A7carMvqfm3MxiWCMN7KOjzfbZo0is3FxyWDf6e4Ad0sU6Of10.PvukuaqO2ez~YLU.lCrLYDC4.xDb420z2",
			"type": "string"
		},
		{
			"key": "code_method",
			"value": "S256",
			"type": "string"
		},
		{
			"key": "authorization_code",
			"value": "",
			"type": "string"
		},
		{
			"key": "id_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	]
}